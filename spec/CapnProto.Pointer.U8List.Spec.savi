:class CapnProto.Pointer.U8List.Spec
  :is Spec
  :const describes: "CapnProto.Pointer.U8List"

  :fun from_segment(bytes Bytes, byte_offset USize = 0)
    segments = CapnProto.Segments.new
    segment = CapnProto.Segment.new_from_bytes(segments, bytes.clone)
    pointer = CapnProto.Pointer.U8List.empty(segment)
    assert no_error: (
      ptr_value = segment._u64!(byte_offset.u32)
      pointer = _ParseU8ListPointer._parse!(segment, byte_offset.u32, ptr_value)
    )
    pointer

  :fun from_segments(chunks Array(Bytes), byte_offset USize = 0)
    segments = CapnProto.Segments.new
    chunks.each -> (chunk |
      CapnProto.Segment.new_from_bytes(segments, chunk.clone)
    )
    segment = try (segments._list[0]! | CapnProto.Segment.new_from_bytes(segments, b"".clone))
    pointer = CapnProto.Pointer.U8List.empty(segment)
    assert no_error: (
      ptr_value = segment._u64!(byte_offset.u32)
      pointer = _ParseU8ListPointer._parse!(segment, byte_offset.u32, ptr_value)
    )
    pointer

  :it "reads text from a byte region"
    p = @from_segment(b"\
      \x01\x00\x00\x00\x02\x01\x00\x00\
      Here's some text with length 31\x00\
      \xde\xad\xbe\xef\xde\xad\xbe\xef\
    ")

    assert: "\(CapnProto.Text.from_pointer(p))"
      == "Here's some text with length 31"

  :it "can point to a prior byte region"
    p = @from_segment(b"\
      \xde\xad\xbe\xef\xde\xad\xbe\xef\
      Here is a text!\x00\
      \xde\xad\xbe\xef\xde\xad\xbe\xef\
      \xf1\xff\xff\xff\x82\x00\x00\x00\
      \xde\xad\xbe\xef\xde\xad\xbe\xef\
    ", 0x20)

    assert: "\(CapnProto.Text.from_pointer(p))"
      == "Here is a text!"

  :it "can point to a byte region via a far pointer"
    p = @from_segments([b"\
      \x12\x00\x00\x00\x02\x00\x00\x00\
    ", b"\
      There's nothing meaningful in this middle segment.
      It's just a placeholder in between the other two.
    ", b"\
      \xde\xad\xbe\xef\xde\xad\xbe\xef\
      \xde\xad\xbe\xef\xde\xad\xbe\xef\
      \x01\x00\x00\x00\x02\x01\x00\x00\
      Here's some text with length 31\x00\
      \xde\xad\xbe\xef\xde\xad\xbe\xef\
    "])

    assert: "\(CapnProto.Text.from_pointer(p))"
      == "Here's some text with length 31"

  :it "can point to a byte region via a double-far pointer"
    p = @from_segments([b"\
      \x26\x00\x00\x00\x01\x00\x00\x00\
    ", b"\
      \xde\xad\xbe\xef\xde\xad\xbe\xef\
      \xde\xad\xbe\xef\xde\xad\xbe\xef\
      \xde\xad\xbe\xef\xde\xad\xbe\xef\
      \xde\xad\xbe\xef\xde\xad\xbe\xef\
      \x12\x00\x00\x00\x02\x00\x00\x00\
      \x01\x00\x00\x00\x02\x01\x00\x00\
      \xde\xad\xbe\xef\xde\xad\xbe\xef\
      \xde\xad\xbe\xef\xde\xad\xbe\xef\
    ", b"\
      \xde\xad\xbe\xef\xde\xad\xbe\xef\
      \xde\xad\xbe\xef\xde\xad\xbe\xef\
      Here's some text with length 31\x00\
      \xde\xad\xbe\xef\xde\xad\xbe\xef\
    "])

    assert: "\(CapnProto.Text.from_pointer(p))"
      == "Here's some text with length 31"
