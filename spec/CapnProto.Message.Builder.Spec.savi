:class CapnProto.Message.Builder.Spec
  :is Spec
  :const describes: "CapnProto.Message.Builder"

  :it "reads from and writes to fields of the root struct"
    message = CapnProto.Message.Builder(_Example.Root.Builder).new(0x4000)
    root = message.root
    assert: root.some_u64 == 0, root.some_u64 = 35, assert: root.some_u64 == 35
    assert: root.some_i64 == 0, root.some_i64 = 36, assert: root.some_i64 == 36
    assert: root.some_u32 == 0, root.some_u32 = 37, assert: root.some_u32 == 37
    assert: root.some_i32 == 0, root.some_i32 = 38, assert: root.some_i32 == 38
    assert: root.some_u16 == 0, root.some_u16 = 39, assert: root.some_u16 == 39
    assert: root.some_i16 == 0, root.some_i16 = 40, assert: root.some_i16 == 40
    assert: root.some_u8  == 0, root.some_u8  = 41, assert: root.some_u8  == 41
    assert: root.some_i8  == 0, root.some_i8  = 42, assert: root.some_i8  == 42

    assert error: root.some_text_if_set!
    assert: "\(root.some_text)"         == ""
    root.some_text                       = "foo"
    assert: "\(root.some_text)"         == "foo"
    assert: "\(root.some_text_if_set!)" == "foo"
    root.some_text                       = "This is an example string"
    assert: "\(root.some_text)"         == "This is an example string"
    assert: "\(root.some_text_if_set!)" == "This is an example string"
    root.some_text                       = ""
    assert: "\(root.some_text)"         == ""
    assert error: root.some_text_if_set!

    assert error: root.some_data_if_set!
    assert: "\(root.some_data)"         == ""
    root.some_data                      = b"bar"
    assert: "\(root.some_data)"         == "bar"
    assert: "\(root.some_data_if_set!)" == "bar"
    root.some_data                      = b"This is some example data"
    assert: "\(root.some_data)"         == "This is some example data"
    assert: "\(root.some_data_if_set!)" == "This is some example data"
    root.some_data                      = b""
    assert: "\(root.some_data)"         == ""
    assert error: root.some_data_if_set!

    message2 = CapnProto.Message.Builder(_Example.Root.Builder).new(0x4000)
    root2 = message2.root
    root2.copy_data_from(root.as_reader)

    assert: root2.some_u64 == 35
    assert: root2.some_i64 == 36
    assert: root2.some_u32 == 37
    assert: root2.some_i32 == 38
    assert: root2.some_u16 == 39
    assert: root2.some_i16 == 40
    assert: root2.some_u8  == 41
    assert: root2.some_i8  == 42
    assert: "\(root2.some_text)" == ""
    assert: "\(root2.some_data)" == ""

    root.some_text = "foo"
    root.some_data = b"bar"
    root2.copy_data_from(root.as_reader)
    assert: "\(root2.some_text)" == "foo"
    assert: "\(root2.some_data)" == "bar"

  :it "reads from and writes to fields of the child struct"
    message = CapnProto.Message.Builder(_Example.Root.Builder).new(0x4000)
    root = message.root
    assert error: root.child_if_set!
    assert: root.child.a == 0, root.child.a = 77, assert: root.child.a == 77
    assert: root.child.b == 0, root.child.b = 88, assert: root.child.b == 88

    assert: "\(root.child.name)" == ""
    root.child.name = "Alice"
    assert: "\(root.child.name)" == "Alice"
    assert: "\(root.child_if_set!.name)" == "Alice"

    message2 = CapnProto.Message.Builder(_Example.Root.Builder).new(0x4000)
    root2 = message2.root
    root2.copy_data_from(root.as_reader)

    assert: root2.child.a == 77
    assert: root2.child.b == 88
    assert: "\(root2.child.name)" == "Alice"

  :it "reads from and writes to fields of the list children structs"
    message = CapnProto.Message.Builder(_Example.Root.Builder).new(0x4000)
    root = message.root

    assert: root.children.size == 0
    assert error: root.children_if_set!
    assert error: root.children[0]!

    assert: root.init_children(3).size == 3
    assert: root.children_if_set!.size == 3
    assert: root.children[0]!.a == 0
    assert: root.children[0]!.b == 0
    assert: "\(root.children[0]!.name)" == ""
    assert: root.children[2]!.a == 0
    assert: root.children[2]!.b == 0
    assert: "\(root.children[2]!.name)" == ""
    assert error: root.children[3]!

    children = root.children
    assert: (children[0]!.a = 11, children[0]!.a == 11)
    assert: (children[0]!.b = 22, children[0]!.b == 22)
    assert: (children[0]!.name = "foo", "\(children[0]!.name)" == "foo")
    assert: (children[1]!.a = 33, children[1]!.a == 33)
    assert: (children[1]!.b = 44, children[1]!.b == 44)
    assert: (children[1]!.name = "bar", "\(children[1]!.name)" == "bar")
    assert: (children[2]!.a = 55, children[2]!.a == 55)
    assert: (children[2]!.b = 66, children[2]!.b == 66)
    assert: (children[2]!.name = "baz", "\(children[2]!.name)" == "baz")

    message2 = CapnProto.Message.Builder(_Example.Root.Builder).new(0x4000)
    root2 = message2.root
    root2.copy_data_from(root.as_reader)

    assert: root2.children.size == 3
    assert: root2.children[0]!.a == 11
    assert: root2.children[0]!.b == 22
    assert: "\(root2.children[0]!.name)" == "foo"
    assert: root2.children[1]!.a == 33
    assert: root2.children[1]!.b == 44
    assert: "\(root2.children[1]!.name)" == "bar"
    assert: root2.children[2]!.a == 55
    assert: root2.children[2]!.b == 66
    assert: "\(root2.children[2]!.name)" == "baz"

    children = root.trim_children(0, 3)
    assert: children.size == 3
    children = root.trim_children(0, 999)
    assert: children.size == 3
    children = root.trim_children(1, 2)
    assert: children.size == 1
    children = root.children
    assert: children.size == 1
    assert: children[0]!.a == 33
    assert: children[0]!.b == 44
    assert: "\(children[0]!.name)" == "bar"
    children = root.trim_children(999, 0)
    assert: children.size == 0

    assert: root.init_children(1000).size == 1000
    assert: root.children[0]!.a == 0
    assert: root.children[0]!.b == 0
    assert: "\(root.children[0]!.name)" == ""
    assert: root.children[999]!.a == 0
    assert: root.children[999]!.b == 0
    assert: "\(root.children[999]!.name)" == ""
    assert error: root.children[1000]!

  :it "marks union group membership and reads from and writes to union fields"
    message = CapnProto.Message.Builder(_Example.Root.Builder).new(0x4000)
    root = message.root

    foo = root.init_foo
    assert: root.foo! === foo
    assert error: root.bar!
    assert: root.is_foo.is_true
    assert: root.is_bar.is_false

    assert: foo.some_u64 == 0, foo.some_u64 = 40, assert: foo.some_u64 == 40
    assert: foo.some_u32 == 0, foo.some_u32 = 41, assert: foo.some_u32 == 41
    assert: "\(foo.txt)" == "", foo.txt = "foo", assert: "\(foo.txt)" == "foo"

    bar = root.init_bar
    assert error: root.foo!
    assert: root.bar! === bar
    assert: root.is_foo.is_false
    assert: root.is_bar.is_true

    assert: bar.some_f64 == 0, bar.some_f64 = 42.2, assert: bar.some_f64 == 42.2
    assert: bar.some_f32 == 0, bar.some_f32 = 43.3, assert: bar.some_f32 == 43.3
    assert: "\(bar.blob)" == "", bar.blob = b"!!", assert: "\(bar.blob)" == "!!"

    message2 = CapnProto.Message.Builder(_Example.Root.Builder).new(0x4000)
    root2 = message2.root
    root2.copy_data_from(root.as_reader)

    assert: root2.is_foo.is_false
    assert: root2.is_bar.is_true

    assert: root2.bar!.some_f64 == 42.2
    assert: root2.bar!.some_f32 == 43.3
    assert: "\(root2.bar!.blob)" == "!!"

  :it "can represent generic types with type parameters"
    message = CapnProto.Message.Builder(
      _Example.Tree.Builder(
        _Example.Key, _Example.Key.Builder
        _Example.Child, _Example.Child.Builder
      )
    ).new(0x4000)
    root = message.root

    deep1 = root.left.left.left
    deep2 = root.right.right.right

    deep1.key.text = "foo"
    deep1.value.a = 11
    deep2.key.text = "bar"
    deep2.value.a = 22

    assert: "\(deep1.key.text)" == "foo"
    assert: deep1.value.a == 11
    assert: "\(deep2.key.text)" == "bar"
    assert: deep2.value.a == 22

    assert: "\(deep1.as_reader.key.text)" == "foo"
    assert: deep1.as_reader.value.a == 11
    assert: "\(deep2.as_reader.key.text)" == "bar"
    assert: deep2.as_reader.value.a == 22

  :it "lets you point two parents to the same child struct in memory"
    message = CapnProto.Message.Builder(_Example.Root.Builder).new(0x4000)
    root = message.root

    assert: root.init_children(4).size == 4
    assert: root.children.size == 4

    assert error: root.children[0]!.referenced_if_set!
    assert error: root.children[1]!.referenced_if_set!

    assert no_error: (
      root.children[0]!.referenced.a = 11
      root.children[0]!.referenced.b = 22
      root.children[0]!.referenced.name = "foo"
    )

    assert: root.children[1]!.set_referenced_to_point_to_existing(
      root.children[0]!.referenced
    ).capn_proto_address == root.children[0]!.referenced.capn_proto_address

    assert: root.children[1]!.referenced.a == 11
    assert: root.children[1]!.referenced.b == 22
    assert: "\(root.children[1]!.referenced.name)" == "foo"

    assert no_error: (
      root.children[0]!.referenced.a = 33
      root.children[0]!.referenced.b = 44
      root.children[0]!.referenced.name = "bar"
    )

    assert: root.children[1]!.referenced.a == 33
    assert: root.children[1]!.referenced.b == 44
    assert: "\(root.children[1]!.referenced.name)" == "bar"

    assert no_error: (
      root.children[2]!.referenced.a = 55
      root.children[2]!.referenced.b = 66
      root.children[2]!.referenced.name = "baz"
    )

    assert: root.children[0]!.set_referenced_to_point_to_existing(
      root.children[2]!.referenced
    ).capn_proto_address == root.children[2]!.referenced.capn_proto_address

    assert: root.children[0]!.referenced.a == 55
    assert: root.children[0]!.referenced.b == 66
    assert: "\(root.children[0]!.referenced.name)" == "baz"

    assert: root.children[1]!.referenced.a == 33
    assert: root.children[1]!.referenced.b == 44
    assert: "\(root.children[1]!.referenced.name)" == "bar"

    assert no_error: (
      root.children[3]!.referenced.a = 77
      root.children[3]!.referenced.b = 88
      root.children[3]!.referenced.name = "qux"
    )

    assert: root.children[1]!.referenced.a == 33
    assert: root.children[1]!.referenced.b == 44
    assert: "\(root.children[1]!.referenced.name)" == "bar"

    message2 = CapnProto.Message.Builder(_Example.Root.Builder).new(0x4000)
    root2 = message2.root
    cache = CapnProto.ReferenceCache.new

    root2.copy_or_reference_data_from(root.as_reader, cache)

    assert: root2.children.size == 4
    assert: root2.children[0]!.referenced.a == 55
    assert: root2.children[0]!.referenced.b == 66
    assert: "\(root2.children[0]!.referenced.name)" == "baz"
    assert: root2.children[1]!.referenced.a == 33
    assert: root2.children[1]!.referenced.b == 44
    assert: "\(root2.children[1]!.referenced.name)" == "bar"
    assert: root2.children[2]!.referenced.a == 55
    assert: root2.children[2]!.referenced.b == 66
    assert: "\(root2.children[2]!.referenced.name)" == "baz"
    assert: root2.children[3]!.referenced.a == 77
    assert: root2.children[3]!.referenced.b == 88
    assert: "\(root2.children[3]!.referenced.name)" == "qux"
    assert: root2.children[0]!.referenced.capn_proto_absolute_address ==
      root2.children[2]!.referenced.capn_proto_absolute_address
    assert: root.children[0]!.referenced.capn_proto_absolute_address !=
      root2.children[0]!.referenced.capn_proto_absolute_address

  :it "lets you take the resulting byte buffers"
    message = CapnProto.Message.Builder(_Example.Root.Builder).new(0x4000)
    buffers = message.take_val_buffers

    assert: buffers.size == 0

    message.root.init_children(999) // allocate the root struct and 999 children

    buffers = message.take_val_buffers
    assert: buffers.size == 1
    assert: buffers[0]!.size == 0x7D48
    assert: buffers[0]!.space == 0x8000

    message.root // allocate just the root struct

    buffers = message.take_val_buffers
    assert: buffers.size == 1
    assert: buffers[0]!.size == 0x60
    assert: buffers[0]!.space == 0x4000

  :it "correctly handles free-and-allocate in this regression test"
    message = CapnProto.Message.Builder(_Example.Root.Builder).new(0x4000)
    message.root.some_text = "foo" // first, allocate a small text chunk
    message.root.some_text = "Now, allocate a larger text chunk"

    buffers = message.take_val_buffers
    assert: buffers.size == 1
    assert: "\(buffers[0]!.format.xxd)" == "\
      00000000: 0000 0000 0600 0500 0000 0000 0000 0000 ................\n\
      00000010: 0000 0000 0000 0000 0000 0000 0000 0000 ................\n\
      00000020: 0000 0000 0000 0000 0000 0000 0000 0000 ................\n\
      00000030: 0000 0000 0000 0000 4500 0000 1201 0000 ........E.......\n\
      00000040: 0000 0000 0000 0000 0000 0000 0000 0000 ................\n\
      00000050: 0000 0000 0000 0000 0000 0000 0000 0000 ................\n\
      00000060: 0000 0000 0000 0000 0000 0000 0600 0500 ................\n\
      00000070: 0000 0000 0000 0000 0000 0000 0000 0000 ................\n\
      00000080: 0000 0000 0000 0000 0000 0000 0000 0000 ................\n\
      00000090: 0000 0000 0000 0000 0000 0000 0000 0000 ................\n\
      000000a0: 0000 0000 0000 0000 0000 0000 0000 0000 ................\n\
      000000b0: 0000 0000 0000 0000 0000 0000 0000 0000 ................\n\
      000000c0: 0000 0000 0000 0000 4e6f 772c 2061 6c6c ........Now,.all\n\
      000000d0: 6f63 6174 6520 6120 6c61 7267 6572 2074 ocate.a.larger.t\n\
      000000e0: 6578 7420 6368 756e 6b00 0000 0000 0000 ext.chunk.......\n\
    "

  :it "lets you take the resulting message as a val"
    builder = CapnProto.Message.Builder(_Example.Root.Builder).new(0x4000)
    builder.root.some_text = "foo"

    assert no_error: (
      message val = CapnProto.Message(_Example.Root).from_val_segments!(
        builder.take_val_segments
      )

      assert: "\(message.root.some_text)" == "foo"

      assert: message.val_buffers.size == 1
      assert: message.val_buffers[0]! == b"\
        \x00\x00\x00\x00\x06\x00\x05\x00\x00\x00\x00\x00\x00\x00\x00\x00\
        \x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\
        \x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\
        \x00\x00\x00\x00\x00\x00\x00\x00\x11\x00\x00\x00\"\x00\x00\x00\
        \x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\
        \x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\
        foo\x00\x00\x00\x00\x00\
      "
    )
