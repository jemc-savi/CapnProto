:class CapnProto.Segment
  :let _segments CapnProto.Segments
  :let _bytes Bytes'ref
  :let _holes Array(Pair(U32))
  :let _index USize

  :new new_from_bytes(@_segments, @_bytes, @_holes = [])
    @_index = @_segments._list.size
    @_segments._list << @

  :new (@_segments, space USize)
    @_bytes = Bytes.new(space)
    @_bytes.fill_with_zeros(0, @_bytes.space)
    @_holes = [Pair(U32).new(0, space.u32)]
    @_index = @_segments._list.size
    @_segments._list << @

  :fun _u8!(offset U32): @_bytes[offset.usize]!
  :fun _u16!(offset U32): @_bytes.read_native_u16!(offset.usize).le_to_native
  :fun _u32!(offset U32): @_bytes.read_native_u32!(offset.usize).le_to_native
  :fun _u64!(offset U32): @_bytes.read_native_u64!(offset.usize).le_to_native

  :fun ref _set_u8!(offset U32, value U8): @_bytes[offset.usize]! = value
  :fun ref _set_u16!(offset U32, value U16): @_bytes.write_native_u16!(offset.usize, value.native_to_le)
  :fun ref _set_u32!(offset U32, value U32): @_bytes.write_native_u32!(offset.usize, value.native_to_le)
  :fun ref _set_u64!(offset U32, value U64): @_bytes.write_native_u64!(offset.usize, value.native_to_le)

  :fun ref _allocate_and_write_string(value String) U32
    byte_count = value.size.u32

    // CapnProto requires a null terminator, so we add it to the alloc count.
    // If the size is too big we can't write it and need to return early,
    // with an invalid offset (`U32.max_value`) to indicate the problem.
    alloc_count = try (byte_count +! 1 | return U32.max_value)
    byte_offset = @_allocate_pointer(alloc_count)

    // Do a copy for the content then set the terminator byte separately.
    @_bytes.copy_from(value.as_bytes, 0, byte_count.usize, byte_offset.usize)
    try (@_bytes[(byte_offset + byte_count).usize]! = 0)

    byte_offset

  :fun ref _allocate_and_write_bytes(value Bytes) U32
    byte_count = value.size.u32
    byte_offset = @_allocate_pointer(byte_count)

    @_bytes.copy_from(value, 0, byte_count.usize, byte_offset.usize)

    byte_offset

  :fun ref _reallocate_pointer(
    offset U32
    old_size U32
    need_size U32
  ) U32
    new_offset = @_allocate_pointer(need_size)
    @_free_pointer(offset, old_size)
    new_offset

  :fun ref _allocate_pointer(need_size U32) U32
    // TODO: Allocate an extra 8 bytes to use for reference counting,
    // and then add incref and decref logic to allow sharing pointers.

    // Round up the requested size to the nearest multiple of 8.
    need_size = (need_size + 7).bit_and(-8)

    // First, try to find a hole that the allocation will fit in.
    @_holes.each_with_index -> (hole, index |
      hole_size = hole.tail - hole.head

      // If it fits exactly in the hole, the hole is removed.
      if hole_size == need_size (
        try @_holes.delete_at!(index)
        return hole.head.u32
      )

      // If it fits in part of the hole, the hole is reduced.
      if hole_size > need_size (
        new_hole = Pair(U32).new(hole.head + need_size, hole.tail)
        try (@_holes[index]! = new_hole)
        return hole.head.u32
      )
    )
    // Otherwise we need to expand the byte buffer to make more space,
    // and fill the remaining space with zeros.

    // Check if we have a hole that ends at the end of the buffer.
    // If so, then this hole will be where the new allocation begins.
    final_hole_head = @_bytes.size.u32
    final_hole_size U32 = 0
    try (
      hole = @_holes.last!
      if hole.tail == @_bytes.size.u32 (
        final_hole_head = hole.head
        final_hole_size = hole.tail - hole.head
      )
    )

    // Expand the byte buffer to a size greater than or equal to the needed size
    // (in practice, the next power of 2 size, due to how `Bytes` works),
    // and fill the newly allocated bytes with zeros.
    occupied_size = @_bytes.size + need_size.usize - final_hole_size.usize
    @_bytes.reserve(occupied_size)
    @_bytes.fill_with_zeros(
      (final_hole_head + final_hole_size).usize
      @_bytes.space
    )

    // Do the internal bookkeeping needed to ensure our remaining final hole
    // is properly accounted for, as necessary.
    remaining_final_hole = Pair(U32).new(occupied_size.u32, @_bytes.space.u32)
    if remaining_final_hole.tail > remaining_final_hole.head (
      if final_hole_size > 0 (
        try (@_holes.last! = remaining_final_hole)
      |
        @_holes.push(remaining_final_hole)
      )
    |
      try @_holes.pop!
    )

    // Return the correct head for the new allocation, which is wherever
    // the old final hole's head was (or the previous end of buffer).
    final_hole_head.u32

  :fun ref _free_pointer(free_head U32, free_size U32)
    // Round up the requested size to the nearest multiple of 8.
    free_size = (free_size + 7).bit_and(-8)

    free_tail = free_head + free_size

    // First, fill the range with zeros to ensure it won't leak data.
    @_bytes.fill_with_zeros(free_head.usize, free_tail.usize)

    // Now figure out where the freed range should be noted in the holes list.
    @_holes.each_with_index -> (hole, index |
      // If the freed range is left-adjacent to a hole, extend that hole.
      if hole.tail == free_head (
        try (@_holes[index]! = Pair(U32).new(hole.head, free_tail))
        return @
      )

      // If the freed range is right-adjacent to a hole, extend that hole.
      if hole.head == free_tail (
        try (@_holes[index]! = Pair(U32).new(free_head, hole.tail))
        return @
      )

      // If the freed range is after the hole, insert it as a new hole here.
      if hole.tail < free_head (
        try @_holes.insert_at!(index + 1, Pair(U32).new(free_head, free_tail))
        return @
      )
    )

    // Otherwise, add it as a new hole at the end.
    @_holes << Pair(U32).new(free_head, free_tail)
    @

  :fun ref _take_buffer Bytes'iso
    buffer = @_bytes.take_buffer

    try buffer.truncate(@_holes.last!.head.usize)
    @_holes.clear

    --buffer
