:trait box _MessageRoot
  :new box read_from_pointer(p CapnProto.Pointer.Struct)
  :new val read_val_from_pointer(p CapnProto.Pointer.Struct'val)

:struct box CapnProto.Message(A _MessageRoot)
  :let _p CapnProto.Pointer.Struct

  :new box (@_p)
  :new val new_val(p CapnProto.Pointer.Struct'val): @_p = p

  :fun root: A.read_from_pointer(@_p)
  :fun val val_root: A.read_val_from_pointer(@_p)

  :fun val val_buffers
    @_p._segment._segments.val_buffers

  :fun non from_segments!(
    segments CapnProto.Segments'box
    start_offset USize = 0
    segment_index USize = 0
  )
    segment = segments._list[segment_index]!
    value = segment._u64!(start_offset.u32)
    @new(_ParseStructPointer._parse!(segment, start_offset.u32, value))

  :fun non from_val_segments!(
    segments CapnProto.Segments'val
    start_offset USize = 0
    segment_index USize = 0
  )
    segment = segments._list[segment_index]!
    value = segment._u64!(start_offset.u32)
    @new_val(_ParseStructPointer._parse_val!(segment, start_offset.u32, value))

:trait _MessageBuilderRoot
  :new from_pointer(p CapnProto.Pointer.Struct.Builder)

  :const capn_proto_data_word_count U16: 0
  :const capn_proto_pointer_count U16: 0

:struct CapnProto.Message.Builder(A _MessageBuilderRoot)
  :let _initial_size USize
  :let _segments CapnProto.Segments

  :new (initial_size USize)
    alloc_byte_size = (
      A.capn_proto_data_word_count.usize +
      A.capn_proto_pointer_count.usize
    ) * 8 + 8
    @_initial_size = initial_size.at_least(alloc_byte_size)
    @_segments = CapnProto.Segments.new

  :fun ref take_val_buffers: @_segments.take_val_buffers
  :fun ref take_val_segments: @_segments.take_val_segments

  :fun ref root
    segment = try (
      @_segments._list[0]!
    |
      CapnProto.Segment.new(@_segments, @_initial_size)
    )

    pointer = CapnProto.Pointer.Struct.Builder._new(
      segment, 8, A.capn_proto_data_word_count, A.capn_proto_pointer_count
    )
    try segment._set_u64!(
      segment._allocate_pointer(pointer._total_byte_size + 8)
      _WriteStructPointer._encode_with_zero_relative_offset(pointer)
    )

    A.from_pointer(pointer)
