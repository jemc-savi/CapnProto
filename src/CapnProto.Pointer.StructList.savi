:module _ParseStructListPointer
  :fun non _parse!(segment CapnProto.Segment'box, current_offset U32, value U64)
    // Quick error path for null pointers.
    error! if value.is_zero

    // Handle the case that this may be a far pointer, pointing to the pointer.
    override_byte_offset U32 = -1
    try (
      far = _FarPointer._parse!(segment._segments, current_offset, value)
      segment = far._segment
      current_offset = far._byte_offset
      override_byte_offset = far._override_byte_offset
      value = far._pointer_value
    )

    // lsb                       list pointer                        msb
    // +-+-----------------------------+--+----------------------------+
    // |A|             B               |C |             D              |
    // +-+-----------------------------+--+----------------------------+

    // A (2 bits) = 1, to indicate that this is a list pointer.
    // B (30 bits) = Offset, in words, from the end of the pointer to the
    //     start of the first element of the list.  Signed.
    // C (3 bits) = Size of each element:
    //     0 = 0 (e.g. List(Void))
    //     1 = 1 bit
    //     2 = 1 byte
    //     3 = 2 bytes
    //     4 = 4 bytes
    //     5 = 8 bytes (non-pointer)
    //     6 = 8 bytes (pointer)
    //     7 = composite (see below)
    // D (29 bits) = Size of the list:
    //     when C <> 7: Number of elements in the list.
    //     when C = 7: Number of words in the list, not counting the tag word
    //     (see below).

    // The 2 least significant bits (A) encode the pointer kind.
    // Raise an error if this is not coded as a list pointer (kind one).
    error! unless value.u8.bit_and(0b11) == 1
    lower_32 = value.u32.bit_xor(1)

    // The 3 least significant bits of the upper half (C) encode the size class.
    // Raise an error if this is not coded as a composite pointer.
    upper_32 = value.bit_shr(32).u32
    error! unless (
      upper_32.u8.bit_and(0b111)
      == CapnProto.Meta.ElementSize.InlineComposite.u8
    )

    // The bottom 32 bits of the value (excluding the 2 least significant bits
    // (which we have already cleared to zero using the xor operation above),
    // encode a 30-bit signed integer (B) indicating the offset in 8-byte words
    // to the pointed-to location within the segment, from the current offset.
    //
    // Given that we know the lowest two bits are zero, we can treat this
    // as a 32-bit signed integer indicating half of the actual offset,
    // because multiplying by 4 is the same as bit shifting rightward by 2,
    // and 4 is half of the factor of 8 we need to mutiply by to translate
    // the offset from units of 8-byte words to units of bytes.
    //
    // We first truncate the U64 to a U32, then as a separate step,
    // we reinterpret the unsigned U32 as a signed I32.
    // When we add the signed offset half to the current offset, any overflow
    // or underflow is treated as a protocol error (an invalid pointer).
    offset_half = lower_32.i32
    tag_byte_offset = (current_offset.i32 +! offset_half +! offset_half).u32! +! 8
    if override_byte_offset != -1 (tag_byte_offset = override_byte_offset)
    byte_offset = tag_byte_offset +! 8

    // The upper 32-bits of the value, excluding the least significant 3 bits,
    // (D) indicate the number of 8-byte words of space needed for the list,
    // which is distinct from the number of elements in the list.
    word_count = upper_32.bit_shr(3).usize
    if word_count == 0 (
      return CapnProto.Pointer.StructList.empty(segment)
    )

    // Read the tag pointer, which is similar to a struct pointer,
    // and describes the individual size of all structs in the list,
    // as well as the number of structs in the list.
    tag_value = segment._u64!(tag_byte_offset)
    error! unless tag_value.u8.bit_and(0b11) == 0
    list_count = tag_value.u32.bit_shr(2)
    data_word_count = tag_value.bit_shr(32).u16
    pointer_count = tag_value.bit_shr(48).u16

    CapnProto.Pointer.StructList._new(
      segment, byte_offset
      list_count, data_word_count, pointer_count
    )

  :fun _parse_builder!(
    segment CapnProto.Segment
    current_offset, value
  )
    read_ptr = @_parse!(segment, current_offset, value)
    if read_ptr._segment !== segment (
      try (segment = segment._segments._list[read_ptr._segment._index]!)
    )
    CapnProto.Pointer.StructList.Builder._new(
      segment, read_ptr._byte_offset
      read_ptr._list_count, read_ptr._data_word_count, read_ptr._pointer_count
    )

:module _WriteStructListPointer
  :fun _encode(write_offset U32, pointer CapnProto.Pointer.StructList.Builder)
    // lsb                       list pointer                        msb
    // +-+-----------------------------+--+----------------------------+
    // |A|             B               |C |             D              |
    // +-+-----------------------------+--+----------------------------+

    // A (2 bits) = 1, to indicate that this is a list pointer.
    // B (30 bits) = Offset, in words, from the end of the pointer to the
    //     start of the first element of the list.  Signed.
    // C (3 bits) = Size of each element:
    //     0 = 0 (e.g. List(Void))
    //     1 = 1 bit
    //     2 = 1 byte
    //     3 = 2 bytes
    //     4 = 4 bytes
    //     5 = 8 bytes (non-pointer)
    //     6 = 8 bytes (pointer)
    //     7 = composite (see below)
    // D (29 bits) = Size of the list:
    //     when C <> 7: Number of elements in the list.
    //     when C = 7: Number of words in the list, not counting the tag word
    //     (see below).

    // Note that for relative words, we subtract 2 words instead of 1 because
    // the tag word is an extra landing pad.
    relative_words = (pointer._byte_offset.i32 - write_offset.i32 - 16) / 8

    per_struct_words = pointer._data_word_count.u32 + pointer._pointer_count.u32
    total_list_words = per_struct_words.saturating_multiply(pointer._list_count)

    total_list_words.at_most(0x1fffffff).u64.bit_shl(35)         // D
      .bit_or(relative_words.u64.bit_shl(2).bit_and(0xffffffff)) // B
      .bit_or(0x0000000700000001)                                // A and C

  :fun _encode_tag(pointer CapnProto.Pointer.StructList.Builder)
    pointer._list_count.at_most(0x3fffffff).u64.bit_shl(2) // B
      .bit_or(pointer._data_word_count.u64.bit_shl(32))    // C
      .bit_or(pointer._pointer_count.u64.bit_shl(48))      // D (A is zero)

:struct box CapnProto.Pointer.StructList
  :let _segment CapnProto.Segment'box
  :let _byte_offset U32
  :let _list_count U32
  :let _data_word_count U16
  :let _pointer_count U16
  :new box _new(
    @_segment, @_byte_offset
    @_list_count, @_data_word_count, @_pointer_count
  )

  :new box empty(@_segment)
    @_byte_offset = 0
    @_list_count = 0
    @_data_word_count = 0
    @_pointer_count = 0

  :fun absolute_address: @_segment._bytes.cpointer.address + @_byte_offset.usize

  :fun _element_byte_size: (@_data_word_count.u32 + @_pointer_count.u32) * 8

  :fun "[]!"(n U32)
    error! unless n < @_list_count

    byte_offset = @_byte_offset +! @_element_byte_size *! n

    CapnProto.Pointer.Struct._new(
      @_segment, byte_offset, @_data_word_count, @_pointer_count
    )

  :fun each
    @_list_count.times -> (n |
      try (
        byte_offset = @_byte_offset +! @_element_byte_size *! n

        yield CapnProto.Pointer.Struct._new(
          @_segment, byte_offset, @_data_word_count, @_pointer_count
        )
      )
    )

:struct CapnProto.Pointer.StructList.Builder
  :let _segment CapnProto.Segment
  :let _byte_offset U32
  :let _list_count U32
  :let _data_word_count U16
  :let _pointer_count U16
  :new _new(
    @_segment, @_byte_offset
    @_list_count, @_data_word_count, @_pointer_count
  )

  :fun absolute_address: @_segment._bytes.cpointer.address + @_byte_offset.usize

  :new empty(@_segment)
    @_byte_offset = 0
    @_list_count = 0
    @_data_word_count = 0
    @_pointer_count = 0

  :fun _element_byte_size: (@_data_word_count.u32 + @_pointer_count.u32) * 8
  :fun _total_byte_size
    try (@_element_byte_size *! @_list_count | U32.max_value)

  :fun ref _free: @_segment._free_pointer(@_byte_offset, @_total_byte_size), @

  :new _allocate(
    @_segment
    @_list_count
    @_data_word_count
    @_pointer_count
  )
    byte_offset = @_segment._allocate_pointer(@_total_byte_size + 8)
    @_byte_offset = byte_offset + 8
    try @_segment._set_u64!(byte_offset, _WriteStructListPointer._encode_tag(@))

  :fun ref _trim(trim_left U32, trim_right U32)
    // Create the new, trimmed pointer.
    added_byte_offset = @_element_byte_size * trim_left
    byte_offset = @_byte_offset + added_byte_offset
    list_count = @_list_count - trim_left - trim_right
    new_pointer = @_new(
      @_segment, byte_offset
      list_count, @_data_word_count, @_pointer_count
    )

    // Free the bytes to the right, if applicable.
    if trim_right.is_nonzero (
      @_segment._free_pointer(
        byte_offset + @_element_byte_size * list_count
        @_element_byte_size * trim_right
      )
    )

    // Free the bytes to the left, if applicable.
    if trim_left.is_nonzero (
      @_segment._free_pointer(
        byte_offset - 8 - added_byte_offset
        added_byte_offset
      )
    )

    // Re-encode the tag byte.
    try @_segment._set_u64!(
      byte_offset - 8
      _WriteStructListPointer._encode_tag(new_pointer)
    )

    new_pointer

  :fun ref _reallocate(new_count U32)
    try (
      element_byte_size = @_element_byte_size
      new_byte_size = element_byte_size *! new_count
      old_byte_size = element_byte_size *! @_list_count
      new_byte_offset = @_segment
        ._reallocate_pointer(@_byte_offset, old_byte_size, new_byte_size)

      @_new(
        @_segment
        new_byte_offset
        new_count
        @_data_word_count
        @_pointer_count
      )
    |
      // If the new list size is out of bounds for U32, don't resize at all.
      @
    )

  :fun ref "[]!"(n U32)
    error! unless n < @_list_count

    byte_offset = @_byte_offset
      +! (@_data_word_count.u32 +! @_pointer_count.u32) *! n *! 8

    CapnProto.Pointer.Struct.Builder._new(
      @_segment, byte_offset, @_data_word_count, @_pointer_count
    )

  :fun ref each
    @_list_count.times -> (n |
      try (
        byte_offset = @_byte_offset
          +! (@_data_word_count.u32 +! @_pointer_count.u32) *! n *! 8

        yield CapnProto.Pointer.Struct.Builder._new(
          @_segment, byte_offset, @_data_word_count, @_pointer_count
        )
      )
    )
