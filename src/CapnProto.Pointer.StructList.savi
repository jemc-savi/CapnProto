:struct CapnProto.Pointer.StructList
  :let _segments CapnProto.Segments
  :let _segment CapnProto.Segment
  :let _byte_offset U32
  :let _list_count U32
  :let _data_word_count U16
  :let _pointers_count U16
  :new _new(
    @_segments
    @_segment
    @_byte_offset
    @_list_count
    @_data_word_count
    @_pointers_count
  )

  :new empty(@_segments, @_segment)
    @_byte_offset = 0
    @_list_count = 0
    @_data_word_count = 0
    @_pointers_count = 0

  :fun non from_segments!(
    segments CapnProto.Segments
    start_offset USize = 0
    segment_index USize = 0
  )
    segment = segments._list[segment_index]!
    value = segment._u64!(start_offset.u32)
    @_parse!(segments, segment, start_offset.u32, value)

  :fun non _parse!(segments, segment, current_offset U32, value U64)
    // lsb                       list pointer                        msb
    // +-+-----------------------------+--+----------------------------+
    // |A|             B               |C |             D              |
    // +-+-----------------------------+--+----------------------------+

    // A (2 bits) = 1, to indicate that this is a list pointer.
    // B (30 bits) = Offset, in words, from the end of the pointer to the
    //     start of the first element of the list.  Signed.
    // C (3 bits) = Size of each element:
    //     0 = 0 (e.g. List(Void))
    //     1 = 1 bit
    //     2 = 1 byte
    //     3 = 2 bytes
    //     4 = 4 bytes
    //     5 = 8 bytes (non-pointer)
    //     6 = 8 bytes (pointer)
    //     7 = composite (see below)
    // D (29 bits) = Size of the list:
    //     when C <> 7: Number of elements in the list.
    //     when C = 7: Number of words in the list, not counting the tag word
    //     (see below).

    // The 2 least significant bits (A) encode the pointer kind.
    // Raise an error if this is not coded as a list pointer (kind one).
    // TODO: Handle far pointers
    error! unless (value.u8.bit_and(0b11) == 1)
    lower_32 = value.u32.bit_xor(1)

    // The 3 least significant bits of the upper half (C) encode the size class.
    // Raise an error if this is not coded as a composite pointer.
    upper_32 = value.bit_shr(32).u32
    error! unless (
      upper_32.u8.bit_and(0b111)
      == CapnProto.Meta.ElementSize.InlineComposite.u8
    )

    // The bottom 32 bits of the value (excluding the 2 least significant bits
    // (which we have already cleared to zero using the xor operation above),
    // encode a 30-bit signed integer (B) indicating the offset in 8-byte words
    // to the pointed-to location within the segment, from the current offset.
    //
    // Given that we know the lowest two bits are zero, we can treat this
    // as a 32-bit signed integer indicating half of the actual offset,
    // because multiplying by 4 is the same as bit shifting rightward by 2,
    // and 4 is half of the factor of 8 we need to mutiply by to translate
    // the offset from units of 8-byte words to units of bytes.
    //
    // We first truncate the U64 to a U32, then as a separate step,
    // we reinterpret the unsigned U32 as a signed I32.
    // When we add the signed offset half to the current offset, any overflow
    // or underflow is treated as a protocol error (an invalid pointer).
    offset_half = lower_32.i32
    tag_byte_offset = (current_offset.i32 +! offset_half +! offset_half).u32! +! 8
    byte_offset = tag_byte_offset +! 8

    // The upper 32-bits of the value, excluding the least significant 3 bits,
    // (D) indicate the number of 8-byte words of space needed for the list,
    // which is distinct from the number of elements in the list.
    word_count = upper_32.bit_shr(3).usize
    return @empty(segments, segment) if (word_count == 0)

    // Read the tag pointer, which is similar to a struct pointer,
    // and describes the individual size of all structs in the list,
    // as well as the number of structs in the list.
    tag_value = segment._u64!(tag_byte_offset)
    error! unless (tag_value.u8.bit_and(0b11) == 0)
    list_count = tag_value.u32.bit_shr(2)
    data_word_count = tag_value.bit_shr(32).u16
    pointers_count = tag_value.bit_shr(48).u16

    @_new(
      segments
      segment
      byte_offset
      list_count
      data_word_count
      pointers_count
    )

  // TODO: Deal with the ref/val/box possibilities here instead of assuming ref
  :fun ref "[]"(n U32)
    try (
      error! unless (n < @_list_count)

      byte_offset = @_byte_offset
        +! (@_data_word_count.u32 +! @_pointers_count.u32) *! n *! 8

      CapnProto.Pointer.Struct._new(
        @_segments, @_segment, byte_offset, @_data_word_count, @_pointers_count
      )
    |
      CapnProto.Pointer.Struct.empty(@_segments, @_segment)
    )

