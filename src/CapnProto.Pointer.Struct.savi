:module _ParseStructPointer
  :fun _parse!(segment CapnProto.Segment'box, current_offset U32, value U64)
    // Quick error path for null pointers.
    error! if value.is_zero

    // Handle the case that this may be a far pointer, pointing to the pointer.
    override_byte_offset U32 = -1
    try (
      far = _FarPointer._parse!(segment._segments, current_offset, value)
      segment = far._segment
      current_offset = far._byte_offset
      override_byte_offset = far._override_byte_offset
      value = far._pointer_value
    )

    // lsb                      struct pointer                       msb
    // +-+-----------------------------+---------------+---------------+
    // |A|             B               |       C       |       D       |
    // +-+-----------------------------+---------------+---------------+
    //
    // A (2 bits) = 0, to indicate that this is a struct pointer.
    // B (30 bits) = Offset, in words, from the end of the pointer to the
    //     start of the struct's data section.  Signed.
    // C (16 bits) = Size of the struct's data section, in words.
    // D (16 bits) = Size of the struct's pointer section, in words.

    // The 2 least significant bits (A) encode the pointer kind.
    // Raise an error if this is not coded as a struct pointer (kind zero).
    error! unless value.u8.bit_and(0b11) == 0

    // The bottom 32 bits of the value (excluding the 2 least significant bits)
    // encode a 30-bit signed integer (B) indicating the offset in 8-byte words
    // to the pointed-to location within the segment, from the current offset.
    //
    // Given that we know the lowest two bits are zero, we can treat this
    // as a 32-bit signed integer indicating half of the actual offset,
    // because multiplying by 4 is the same as bit shifting rightward by 2,
    // and 4 is half of the factor of 8 we need to mutiply by to translate
    // the offset from units of 8-byte words to units of bytes.
    //
    // We first truncate the U64 to a U32, then as a separate step,
    // we reinterpret the unsigned U32 as a signed I32.
    // When we add the signed offset half to the current offset, any overflow
    // or underflow is treated as a protocol error (an invalid pointer).
    offset_half = value.u32.i32
    byte_offset = (current_offset.i32 +! 8 +! offset_half +! offset_half).u32!
    if override_byte_offset != -1 (byte_offset = override_byte_offset)

    // The two upper U16 parts of the value (C and D) indicate the size
    // of the struct's data section and its pointers section, in 8-byte words.
    // These allow us to calculate the pointers section offset and end offset.
    data_word_count = value.bit_shr(32).u16
    pointer_count = value.bit_shr(48).u16

    CapnProto.Pointer.Struct._new(
      segment, byte_offset, data_word_count, pointer_count
    )

  :fun _parse_builder!(segment CapnProto.Segment, current_offset, value)
    read_ptr = @_parse!(segment, current_offset, value)
    if read_ptr._segment !== segment (
      try (segment = segment._segments._list[read_ptr._segment._index]!)
    )
    CapnProto.Pointer.Struct.Builder._new(
      segment, read_ptr._byte_offset
      read_ptr._data_word_count, read_ptr._pointer_count
    )

:module _WriteStructPointer
  :fun _encode(write_offset U32, pointer CapnProto.Pointer.Struct.Builder)
    // lsb                      struct pointer                       msb
    // +-+-----------------------------+---------------+---------------+
    // |A|             B               |       C       |       D       |
    // +-+-----------------------------+---------------+---------------+
    //
    // A (2 bits) = 0, to indicate that this is a struct pointer.
    // B (30 bits) = Offset, in words, from the end of the pointer to the
    //     start of the struct's data section.  Signed.
    // C (16 bits) = Size of the struct's data section, in words.
    // D (16 bits) = Size of the struct's pointer section, in words.

    relative_words = (pointer._byte_offset.i32 - write_offset.i32 - 8) / 8

    relative_words.u64.bit_shl(2).bit_and(0xffffffff)   // B (A is zero)
      .bit_or(pointer._data_word_count.u64.bit_shl(32)) // C
      .bit_or(pointer._pointer_count.u64.bit_shl(48))   // D

  :fun _encode_with_zero_relative_offset(
    pointer CapnProto.Pointer.Struct.Builder
  )
    pointer._data_word_count.u64.bit_shl(32)          // C (A and B are zero)
      .bit_or(pointer._pointer_count.u64.bit_shl(48)) // D

:struct box CapnProto.Pointer.Struct
  :let _segment CapnProto.Segment'box
  :let _byte_offset U32
  :let _data_word_count U16
  :let _pointer_count U16
  :new box _new(
    @_segment, @_byte_offset
    @_data_word_count, @_pointer_count
  )

  :new box empty(@_segment)
    @_byte_offset = 0
    @_data_word_count = 0
    @_pointer_count = 0

  :fun absolute_address: @_segment._bytes.cpointer.address + @_byte_offset.usize

  :fun _ptr_byte_offset!(n U16)
    error! unless @_pointer_count > n
    @_byte_offset +! (@_data_word_count +! n).u32 * 8

  :fun _u8!(n U32)
    error! unless @_data_word_count.u32 * 8 > n
    @_segment._u8!(@_byte_offset +! n)

  :fun _u16!(n U32)
    error! unless @_data_word_count.u32 * 8 > n
    @_segment._u16!(@_byte_offset +! n)

  :fun _u32!(n U32)
    error! unless @_data_word_count.u32 * 8 > n
    @_segment._u32!(@_byte_offset +! n)

  :fun _u64!(n U32)
    error! unless @_data_word_count.u32 * 8 > n
    @_segment._u64!(@_byte_offset +! n)

  :fun u8(n) U8: try (@_u8!(n) | 0)
  :fun u16(n) U16: try (@_u16!(n) | 0)
  :fun u32(n) U32: try (@_u32!(n) | 0)
  :fun u64(n) U64: try (@_u64!(n) | 0)

  :fun i8(n): @u8(n).i8
  :fun i16(n): @u16(n).i16
  :fun i32(n): @u32(n).i32
  :fun i64(n): @u64(n).i64

  :fun f32(n): F32.from_bits(@u32(n))
  :fun f64(n): F64.from_bits(@u64(n))

  :fun bool(n, bit_mask): @u8(n).bit_and(bit_mask) != 0

  :fun u8_if_set!(n)  U8:  value = @_u8!(n),  error! if value.is_zero, value
  :fun u16_if_set!(n) U16: value = @_u16!(n), error! if value.is_zero, value
  :fun u32_if_set!(n) U32: value = @_u32!(n), error! if value.is_zero, value
  :fun u64_if_set!(n) U64: value = @_u64!(n), error! if value.is_zero, value

  :fun i8_if_set!(n): @u8_if_set!(n).i8
  :fun i16_if_set!(n): @u16_if_set!(n).i16
  :fun i32_if_set!(n): @u32_if_set!(n).i32
  :fun i64_if_set!(n): @u64_if_set!(n).i64

  :fun f32_if_set!(n): F32.from_bits(@u32_if_set!(n))
  :fun f64_if_set!(n): F64.from_bits(@u64_if_set!(n))

  :fun bool_if_set!(n, bit_mask)
    if @_u8!(n).bit_and(bit_mask) != 0 (True | error!)

  :fun assert_union!(n, value): error! if @u16(n) != value
  :fun check_union(n, value): @u16(n) == value

  :fun text(n): try (@text_if_set!(n) | @_empty_text)
  :fun _empty_text
    CapnProto.Text.read_from_pointer(
      CapnProto.Pointer.U8List.empty(@_segment)
    )
  :fun text_if_set!(n)
    byte_offset = @_ptr_byte_offset!(n)
    CapnProto.Text.read_from_pointer(
      _ParseU8ListPointer._parse!(
        @_segment, byte_offset, @_segment._u64!(byte_offset)
      )
    )

  :fun data(n): try (@data_if_set!(n) | @_empty_data)
  :fun _empty_data
    CapnProto.Data.from_pointer(CapnProto.Pointer.U8List.empty(@_segment))
  :fun data_if_set!(n)
    byte_offset = @_ptr_byte_offset!(n)
    CapnProto.Data.read_from_pointer(
      _ParseU8ListPointer._parse!(
        @_segment, byte_offset, @_segment._u64!(byte_offset)
      )
    )

  :fun struct(n): try (@struct_if_set!(n) | @_empty_struct)
  :fun _empty_struct
    CapnProto.Pointer.Struct.empty(@_segment)
  :fun struct_if_set!(n):
    byte_offset = @_ptr_byte_offset!(n)
    _ParseStructPointer._parse!(
      @_segment, byte_offset, @_segment._u64!(byte_offset)
    )

  :fun list(n): try (@list_if_set!(n) | @_empty_list)
  :fun _empty_list
    CapnProto.Pointer.StructList.empty(@_segment)
  :fun list_if_set!(n):
    byte_offset = @_ptr_byte_offset!(n)
    _ParseStructListPointer._parse!(
      @_segment, byte_offset, @_segment._u64!(byte_offset)
    )

:struct CapnProto.Pointer.Struct.Builder
  :let _segment CapnProto.Segment
  :let _byte_offset U32
  :let _data_word_count U16
  :let _pointer_count U16
  :new _new(
    @_segment, @_byte_offset
    @_data_word_count, @_pointer_count
  )

  :new empty(@_segment)
    @_byte_offset = 0
    @_data_word_count = 0
    @_pointer_count = 0

  :fun _total_byte_size: (@_data_word_count.u32 + @_pointer_count.u32) * 8

  :new _allocate(
    @_segment
    @_data_word_count
    @_pointer_count
  )
    byte_offset = @_segment._allocate_pointer(@_total_byte_size)
    @_byte_offset = byte_offset

  :fun ref _free: @_segment._free_pointer(@_byte_offset, @_total_byte_size), @

  :fun absolute_address: @_segment._bytes.cpointer.address + @_byte_offset.usize

  :fun as_reader:
    CapnProto.Pointer.Struct._new(
      @_segment, @_byte_offset
      @_data_word_count, @_pointer_count
    )

  :fun _ptr_byte_offset!(n U16)
    error! unless @_pointer_count > n
    @_byte_offset +! (@_data_word_count +! n).u32 * 8

  :fun _u8!(n U32)
    error! unless @_data_word_count.u32 * 8 > n
    @_segment._u8!(@_byte_offset +! n)

  :fun _u16!(n U32)
    error! unless @_data_word_count.u32 * 8 > n
    @_segment._u16!(@_byte_offset +! n)

  :fun _u32!(n U32)
    error! unless @_data_word_count.u32 * 8 > n
    @_segment._u32!(@_byte_offset +! n)

  :fun _u64!(n U32)
    error! unless @_data_word_count.u32 * 8 > n
    @_segment._u64!(@_byte_offset +! n)

  :fun ref _set_u8!(n U32, v U8)
    error! unless @_data_word_count.u32 * 8 > n
    @_segment._set_u8!(@_byte_offset +! n, v)

  :fun ref _set_u16!(n U32, v U16)
    error! unless @_data_word_count.u32 * 8 > n
    @_segment._set_u16!(@_byte_offset +! n, v)

  :fun ref _set_u32!(n U32, v U32)
    error! unless @_data_word_count.u32 * 8 > n
    @_segment._set_u32!(@_byte_offset +! n, v)

  :fun ref _set_u64!(n U32, v U64)
    error! unless @_data_word_count.u32 * 8 > n
    @_segment._set_u64!(@_byte_offset +! n, v)

  :fun u8(n) U8: try (@_u8!(n) | 0)
  :fun u16(n) U16: try (@_u16!(n) | 0)
  :fun u32(n) U32: try (@_u32!(n) | 0)
  :fun u64(n) U64: try (@_u64!(n) | 0)

  :fun i8(n): @u8(n).i8
  :fun i16(n): @u16(n).i16
  :fun i32(n): @u32(n).i32
  :fun i64(n): @u64(n).i64

  :fun f32(n): F32.from_bits(@u32(n))
  :fun f64(n): F64.from_bits(@u64(n))

  :fun bool(n, bit_mask): @u8(n).bit_and(bit_mask) != 0

  :fun u8_if_set!(n)  U8:  value = @_u8!(n),  error! if value.is_zero, value
  :fun u16_if_set!(n) U16: value = @_u16!(n), error! if value.is_zero, value
  :fun u32_if_set!(n) U32: value = @_u32!(n), error! if value.is_zero, value
  :fun u64_if_set!(n) U64: value = @_u64!(n), error! if value.is_zero, value

  :fun i8_if_set!(n): @u8_if_set!(n).i8
  :fun i16_if_set!(n): @u16_if_set!(n).i16
  :fun i32_if_set!(n): @u32_if_set!(n).i32
  :fun i64_if_set!(n): @u64_if_set!(n).i64

  :fun f32_if_set!(n): F32.from_bits(@u32_if_set!(n))
  :fun f64_if_set!(n): F64.from_bits(@u64_if_set!(n))

  :fun bool_if_set!(n, bit_mask)
    if @_u8!(n).bit_and(bit_mask) != 0 (True | error!)

  :fun ref set_u8(n, v U8, d U8): try @_set_u8!(n, v.bit_xor(d)), v
  :fun ref set_u16(n, v U16, d U16): try @_set_u16!(n, v.bit_xor(d)), v
  :fun ref set_u32(n, v U32, d U32): try @_set_u32!(n, v.bit_xor(d)), v
  :fun ref set_u64(n, v U64, d U64): try @_set_u64!(n, v.bit_xor(d)), v

  :fun ref set_i8(n, v I8, d I8): @set_u8(n, v.u8, d.u8), v
  :fun ref set_i16(n, v I16, d I16): @set_u16(n, v.u16, d.u16), v
  :fun ref set_i32(n, v I32, d I32): @set_u32(n, v.u32, d.u32), v
  :fun ref set_i64(n, v I64, d I64): @set_u64(n, v.u64, d.u64), v

  :fun ref set_f32(n, v F32, d F32): @set_u32(n, v.bits, d.bits), v
  :fun ref set_f64(n, v F64, d F64): @set_u64(n, v.bits, d.bits), v

  :fun ref set_bool(n, bit_mask, value Bool)
    if value (
      @set_u8(n, @u8(n).bit_or(bit_mask), 0)
    |
      @set_u8(n, @u8(n).bit_and(bit_mask.invert), 0)
    )
    value

  :fun ref clear_8(n): try @_set_u8!(n, 0), @
  :fun ref clear_16(n): try @_set_u16!(n, 0), @
  :fun ref clear_32(n): try @_set_u32!(n, 0), @
  :fun ref clear_64(n): try @_set_u64!(n, 0), @

  :fun ref clear_pointer(n)
    try @_segment._set_u64!(@_ptr_byte_offset!(n), 0)
    @

  :fun assert_union!(n, value): error! if @u16(n) != value
  :fun check_union(n, value): @u16(n) == value
  :fun ref mark_union(n, value): try @_set_u16!(n, value), @

  :fun ref text(n): try (@text_if_set!(n) | @_empty_text)
  :fun ref _empty_text
    CapnProto.Text.from_pointer(
      CapnProto.Pointer.U8List.empty(@_segment)
    )
  :fun ref text_if_set!(n)
    byte_offset = @_ptr_byte_offset!(n)
    CapnProto.Text.from_pointer(
      _ParseU8ListPointer._parse_builder!(
        @_segment, byte_offset, @_segment._u64!(byte_offset)
      )
    )

  :fun ref set_text(n, value String, default_value String) CapnProto.Text
    // TODO: account for default_value

    // We expect the byte offset to be within bounds - otherwise we can't do it,
    // and we'll return an empty `CapnProto.Text` to signal this problem.
    byte_offset = try (@_ptr_byte_offset!(n) | return @_empty_text)

    // If there's an existing pointer, we can free it now.
    try _ParseU8ListPointer._parse_builder!(
      @_segment, byte_offset, @_segment._u64!(byte_offset)
    )._free(@_segment)

    // If the requested value is empty, we won't allocate anything new.
    // We'll just write zero bytes to that pointer's position and return.
    if value.is_empty (
      try @_segment._set_u64!(byte_offset, 0)
      return @_empty_text
    )

    // Now we allocate the new one.
    new_text = CapnProto.Text._new(@_segment, value)

    // We need to write the pointer to the buffer so it can be followed.
    try @_segment._set_u64!(
      byte_offset
      _WriteU8ListPointer._encode(byte_offset, new_text._p)
    )

    new_text

  :fun ref data(n): try (@data_if_set!(n) | @_empty_data)
  :fun ref _empty_data
    CapnProto.Data.from_pointer(CapnProto.Pointer.U8List.empty(@_segment))
  :fun ref data_if_set!(n)
    byte_offset = @_ptr_byte_offset!(n)
    CapnProto.Data.from_pointer(
      _ParseU8ListPointer._parse_builder!(
        @_segment, byte_offset, @_segment._u64!(byte_offset)
      )
    )

  :fun ref set_data(n, value Bytes, default_value Bytes) CapnProto.Data
    // TODO: account for default_value

    // We expect the byte offset to be within bounds - otherwise we can't do it,
    // and we'll return an empty `CapnProto.Data` to signal this problem.
    byte_offset = try (@_ptr_byte_offset!(n) | return @_empty_data)

    // If there's an existing pointer, we can free it now.
    try _ParseU8ListPointer._parse_builder!(
      @_segment, byte_offset, @_segment._u64!(byte_offset)
    )._free(@_segment)

    // If the requested value is empty, we won't allocate anything new.
    // We'll just write zero bytes to that pointer's position and return.
    if value.is_empty (
      try @_segment._set_u64!(byte_offset, 0)
      return @_empty_data
    )

    // Now we allocate the new one.
    new_data = CapnProto.Data._new(@_segment, value)

    // We need to write the pointer to the buffer so it can be followed.
    try @_segment._set_u64!(
      byte_offset
      _WriteU8ListPointer._encode(byte_offset, new_data._p)
    )

    new_data

  :fun ref _empty_struct
    CapnProto.Pointer.Struct.Builder.empty(@_segment)

  :fun ref struct_if_set!(
    n U16
    data_word_count U16
    pointer_count U16
  ) CapnProto.Pointer.Struct.Builder
    byte_offset = @_ptr_byte_offset!(n)
    _ParseStructPointer._parse_builder!(
      @_segment, byte_offset, @_segment._u64!(byte_offset)
    )

  :fun ref struct(
    n U16
    data_word_count U16
    pointer_count U16
  ) CapnProto.Pointer.Struct.Builder
    // We expect the byte offset to be within bounds - otherwise we can't do it,
    // and we'll return an empty struct to signal this problem.
    byte_offset = try (@_ptr_byte_offset!(n) | return @_empty_struct)

    // If there's an existing struct pointer, we can return it now.
    try (
      existing_pointer = _ParseStructPointer._parse_builder!(
        @_segment, byte_offset, @_segment._u64!(byte_offset)
      )
      return existing_pointer
    )

    // Otherwise we need to allocate a new one.
    new_pointer = CapnProto.Pointer.Struct.Builder._allocate(
      @_segment, data_word_count, pointer_count
    )

    // We need to write the pointer to the buffer so it can be followed.
    try @_segment._set_u64!(
      byte_offset
      _WriteStructPointer._encode(byte_offset, new_pointer)
    )

    new_pointer

  :fun ref list(n): try (@list_if_set!(n) | @_empty_list)
  :fun ref _empty_list
    CapnProto.Pointer.StructList.Builder.empty(@_segment)
  :fun ref list_if_set!(n):
    byte_offset = @_ptr_byte_offset!(n)
    _ParseStructListPointer._parse_builder!(
      @_segment, byte_offset, @_segment._u64!(byte_offset)
    )

  :fun ref init_list(
    n U16
    data_word_count U16
    pointer_count U16
    new_list_count USize
  ) CapnProto.Pointer.StructList.Builder
    // We expect the byte offset to be within bounds - otherwise we can't do it,
    // and we'll return an empty list builder to signal this problem.
    byte_offset = try (@_ptr_byte_offset!(n) | return @_empty_list)

    // If there's an existing list pointer, we can free it now.
    try _ParseStructListPointer._parse_builder!(
      @_segment, byte_offset, @_segment._u64!(byte_offset)
    )._free

    // If the requested count is empty, we won't allocate anything new.
    // We'll just write zero bytes to that pointer's position and return.
    if new_list_count.is_zero (
      try @_segment._set_u64!(byte_offset, 0)
      return @_empty_list
    )

    // Now we allocate the new one.
    new_pointer = CapnProto.Pointer.StructList.Builder._allocate(
      @_segment, new_list_count.u32, data_word_count, pointer_count
    )

    // We need to write the pointer to the buffer so it can be followed.
    try @_segment._set_u64!(
      byte_offset
      _WriteStructListPointer._encode(byte_offset, new_pointer)
    )

    new_pointer

  :fun ref trim_list(
    n U16
    data_word_count U16
    pointer_count U16
    new_list_start USize
    new_list_finish USize
  ) CapnProto.Pointer.StructList.Builder

    // We expect the byte offset to be within bounds - otherwise we can't do it,
    // and we'll return an empty list builder to signal this problem.
    byte_offset = try (@_ptr_byte_offset!(n) | return @_empty_list)

    // If there's no existing list pointer (or if an empty list was requested)
    // follow the same logic as init_list.
    pointer = try (
      _ParseStructListPointer._parse_builder!(
        @_segment, byte_offset, @_segment._u64!(byte_offset)
      )
    |
      new_list_finish = new_list_finish.at_least(new_list_start)
      new_list_count = new_list_finish - new_list_start
      return @init_list(n, data_word_count, pointer_count, new_list_count)
    )

    // Clip the parameters. If they end up empty, init an zero-length list.
    new_list_finish = new_list_finish.at_most(pointer._list_count.usize)
    new_list_start = new_list_start.at_most(new_list_finish)
    if new_list_finish == new_list_start (
      return @init_list(n, data_word_count, pointer_count, 0)
    )

    // Get a trimmed pointer (which also frees the gaps on each side)
    pointer = pointer._trim(
      new_list_start.u32
      pointer._list_count - new_list_finish.u32
    )

    // We need to write the pointer to the buffer so it can be followed.
    try @_segment._set_u64!(
      byte_offset
      _WriteStructListPointer._encode(byte_offset, pointer)
    )

    pointer
