:struct CapnProto.Pointer.U8List
  :let _segments CapnProto.Segments
  :let _segment CapnProto.Segment
  :let _byte_offset U32
  :let _byte_count U32
  :new _new(@_segments, @_segment, @_byte_offset, @_byte_count)

  :new empty(@_segments, @_segment)
    @_byte_offset = 0
    @_byte_count = 0

  :fun non from_segments!(
    segments CapnProto.Segments
    start_offset USize = 0
    segment_index USize = 0
  )
    segment = segments._list[segment_index]!
    value = segment._u64!(start_offset.u32)
    @_parse!(segments, segment, start_offset.u32, value)

  :fun non _parse!(segments, segment, current_offset U32, value U64)
    // Handle the case that this may be a far pointer, pointing to the pointer.
    override_byte_offset U32 = -1
    try (
      far = CapnProto.Pointer.Far._parse!(segments, segment, current_offset, value)
      segment = far._segment
      current_offset = far._byte_offset
      override_byte_offset = far._override_byte_offset
      value = far._pointer_value
    )

    // lsb                       list pointer                        msb
    // +-+-----------------------------+--+----------------------------+
    // |A|             B               |C |             D              |
    // +-+-----------------------------+--+----------------------------+

    // A (2 bits) = 1, to indicate that this is a list pointer.
    // B (30 bits) = Offset, in words, from the end of the pointer to the
    //     start of the first element of the list.  Signed.
    // C (3 bits) = Size of each element:
    //     0 = 0 (e.g. List(Void))
    //     1 = 1 bit
    //     2 = 1 byte
    //     3 = 2 bytes
    //     4 = 4 bytes
    //     5 = 8 bytes (non-pointer)
    //     6 = 8 bytes (pointer)
    //     7 = composite (see below)
    // D (29 bits) = Size of the list:
    //     when C <> 7: Number of elements in the list.
    //     when C = 7: Number of words in the list, not counting the tag word
    //     (see below).

    // The 2 least significant bits (A) encode the pointer kind.
    // Raise an error if this is not coded as a list pointer (kind one).
    error! unless (value.u8.bit_and(0b11) == 1)
    lower_32 = value.u32.bit_xor(1)

    // The 3 least significant bits of the upper half (C) encode the size class.
    // Raise an error if this is not coded as a byte pointer.
    upper_32 = value.bit_shr(32).u32
    error! unless (
      upper_32.u8.bit_and(0b111)
      == CapnProto.Meta.ElementSize.Byte.u8
    )

    // The bottom 32 bits of the value (excluding the 2 least significant bits
    // (which we have already cleared to zero using the xor operation above),
    // encode a 30-bit signed integer (B) indicating the offset in 8-byte words
    // to the pointed-to location within the segment, from the current offset.
    //
    // Given that we know the lowest two bits are zero, we can treat this
    // as a 32-bit signed integer indicating half of the actual offset,
    // because multiplying by 4 is the same as bit shifting rightward by 2,
    // and 4 is half of the factor of 8 we need to mutiply by to translate
    // the offset from units of 8-byte words to units of bytes.
    //
    // We first truncate the U64 to a U32, then as a separate step,
    // we reinterpret the unsigned U32 as a signed I32.
    // When we add the signed offset half to the current offset, any overflow
    // or underflow is treated as a protocol error (an invalid pointer).
    offset_half = lower_32.i32
    byte_offset = (current_offset.i32 +! 8 +! offset_half +! offset_half).u32!
    if (override_byte_offset != -1) (byte_offset = override_byte_offset)

    // The upper 32-bits of the value, excluding the least significant 3 bits,
    // (D) indicate the number of elements in the list, which is the same as
    // the number of bytes in the list, because this list is of the byte class.
    byte_count = upper_32.bit_shr(3).u32

    @_new(segments, segment, byte_offset, byte_count)

  :is Indexable(U8)

  :fun "[]!"(index)
    @_segment._bytes[@_byte_offset.usize +! index]!

  :fun each_with_index(from USize = 0, to = USize.max_value, stride USize = 1)
    start = try (from +! @_byte_offset.usize | USize.max_value)
    finish = try (to.min(@_byte_count.usize) +! @_byte_offset.usize | USize.max_value)

    @_segment._bytes.each_with_index(start, finish, stride) -> (byte, index |
      yield (byte, index)
    )

  :fun reverse_each_with_index(
    from = USize.max_value
    to USize = 0
    stride USize = 1
  ) None
    start = try (from.min(@_byte_count.usize) +! @_byte_offset.usize | USize.max_value)
    finish = try (to +! @_byte_offset.usize | USize.max_value)

    @_segment._bytes.reverse_each_with_index(start, finish, stride) -> (byte, index |
      yield (byte, index)
    )
