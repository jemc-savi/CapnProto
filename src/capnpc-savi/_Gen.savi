:class _Gen
  :var _out: String.new_iso
  :let req CapnProto.Meta.CodeGeneratorRequest
  :new (@req, node CapnProto.Meta.Node)
    @_emit_file(node)

  :fun ref take_string: @_out <<= String.new_iso

  :fun _find_node!(id U64) CapnProto.Meta.Node
    @req.nodes.each -> (node |
      return node if node.id == id
    )
    error!

  :fun _find_node_scoped_name(id U64) String
    try (
      @_node_scoped_name(@_find_node!(id))
    |
      "UNKNOWN_ID"
    )

  :fun _node_scoped_name(node CapnProto.Meta.Node) String
    try (
      case (
      | node.is_file |
        node.annotations.each -> (annotation |
          // The namespace of the file can be dictated by the `namespace`
          // annotation in `CapnProto.Savi.Meta.capnp`, whose id is well-known.
          if annotation.id == 0x9c3f4a6aa35d6820 (
            return "\(try annotation.value.text!)"
          )
        )
        "_"
      | node.is_struct && node.struct!.is_group |
        @_node_scoped_name_of_group!(node)
      |
        @_node_scoped_name_of_typedecl!(node)
      )
    |
      "UNKNOWN_NAME"
    )

  :fun _node_scoped_name_of_group!(node CapnProto.Meta.Node) String
    scope_node = @_find_node!(node.scope_id)
    scope_node.struct!.fields.each -> (field |
      try (
        if node.id == field.group!.type_id (
          return "\(@_node_scoped_name(scope_node)).AS_\(field.name)"
        )
      )
    )
    error!

  :fun _node_scoped_name_of_typedecl!(node CapnProto.Meta.Node) String
    scope_node = @_find_node!(node.scope_id)
    scope_node_name = @_node_scoped_name(scope_node)
    scope_node.nested_nodes.each -> (nested |
      if nested.id == node.id (
        if scope_node_name == "_" (
          return "_\(nested.name)"
        |
          return "\(scope_node_name).\(nested.name)"
        )
      )
    )
    error!

  :fun _is_pointer_type(type CapnProto.Meta.Type)
    type.is_text || type.is_data || type.is_list
    || type.is_struct || type.is_interface || type.is_any_pointer

  :fun _type_name(t CapnProto.Meta.Type, is_builder Bool)
    case (
    | t.is_void | "None"
    | t.is_bool | "Bool"
    | t.is_int8 | "I8"
    | t.is_int16 | "I16"
    | t.is_int32 | "I32"
    | t.is_int64 | "I64"
    | t.is_uint8 | "U8"
    | t.is_uint16 | "U16"
    | t.is_uint32 | "U32"
    | t.is_uint64 | "U64"
    | t.is_float32 | "F32"
    | t.is_float64 | "F64"
    | t.is_text | "CapnProto.Text"
    | t.is_data | "CapnProto.Data"
    | t.is_list |
      "CapnProto.List\(
        if is_builder (".Builder" | "")
      )(\(
        try @_type_name(t.list!.element_type, is_builder)
      ))"
    | t.is_enum | "\(try @_find_node_scoped_name(t.enum!.type_id))"
    | t.is_struct |
      "\(
        try @_find_node_scoped_name(t.struct!.type_id)
      )\(
        if is_builder (".Builder" | "")
      )\(
        try (
          args Array(String) = []
          // TODO: In what scenario is there more than one scope?
          // TODO: In what scenario are there non-bind scopes?
          t.struct!.brand.scopes[0]!.bind!.each -> (bind |
            args.push(@_type_name(bind.type!, False))
            if is_builder (
              args.push(@_type_name(bind.type!, True))
            )
          )
          "(\(String.join(args, ", ")))"
        )
      )"
    | t.is_interface | "INTERFACES_NOT_IMPLEMENTED"
    | t.is_any_pointer |
      try (
        parameter_ref = t.any_pointer!.parameter!
        parameter_index = parameter_ref.parameter_index
        parameters = @_find_node!(parameter_ref.scope_id).parameters
        parameter = parameters[parameter_index.usize]!
        "\(parameter.name)\(if is_builder "_Builder")"
      |
        "ANY_POINTER_NOT_IMPLEMENTED"
      )
    | "NOT_IMPLEMENTED"
    )

  :fun _show_value(value CapnProto.Meta.Value) String
    return "None" if value.is_void
    try (string = "\(value.bool!)",    return --string) // TODO: this local variable shouldn't be needed
    try (string = "\(value.int8!)",    return --string) // TODO: this local variable shouldn't be needed
    try (string = "\(value.int16!)",   return --string) // TODO: this local variable shouldn't be needed
    try (string = "\(value.int32!)",   return --string) // TODO: this local variable shouldn't be needed
    try (string = "\(value.int64!)",   return --string) // TODO: this local variable shouldn't be needed
    try (string = "\(value.uint8!)",   return --string) // TODO: this local variable shouldn't be needed
    try (string = "\(value.uint16!)",  return --string) // TODO: this local variable shouldn't be needed
    try (string = "\(value.uint32!)",  return --string) // TODO: this local variable shouldn't be needed
    try (string = "\(value.uint64!)",  return --string) // TODO: this local variable shouldn't be needed
    try (string = "\(value.float32!)", return --string) // TODO: this local variable shouldn't be needed
    try (string = "\(value.float64!)", return --string) // TODO: this local variable shouldn't be needed
    // TODO: text
    // TODO: data
    // TODO: list
    // TODO: enum
    // TODO: struct
    // TODO: interface
    // TODO: any_pointer
    "VALUE_NOT_IMPLEMENTED"

  :fun ref _emit_file(node CapnProto.Meta.Node)
    @_out << <<<
      ///
      // NOTE: This file was auto-generated from a Cap'n Proto file
      // using the `capnp` compiler with the `--output=savi` option.
    >>>
    node.nested_nodes.each -> (nest_info |
      try @_emit_type(@_find_node!(nest_info.id), False)
    )
    node.nested_nodes.each -> (nest_info |
      try @_emit_type(@_find_node!(nest_info.id), True)
    )

  :fun ref _emit_type(node CapnProto.Meta.Node, is_builder Bool)
    case (
    | node.is_enum | if is_builder.is_false @_emit_enum(node)
    | node.is_struct | @_emit_struct(node, is_builder)
    | @_out << "\n\n// UNHANDLED: \(node.display_name)"
    )

  :fun ref _emit_enum(node CapnProto.Meta.Node)
    enum = try (node.enum! | return)
    @_out << "\n\n:enum \(@_node_scoped_name(node))"
    @_out << "\n  :bit_width 16"
    @_out << "\n"

    value U64 = 0
    zero_name = ""
    enum.enumerants.each -> (enumerant |
      if value == 0 (zero_name = "\(_TextCase.Pascal[enumerant.name])")
      @_out << "\n  :member \(_TextCase.Pascal[enumerant.name]) \(value)"
      value += 1
    )

    @_out << "\n\n  :fun non _new(u16 U16)"
    @_out << "\n    try ("
    @_out << "\n      @from_u64!(u16.u64)"
    @_out << "\n    |"
    @_out << "\n      \(@_node_scoped_name(node)).\(zero_name)"
    @_out << "\n    )"

  :fun ref _emit_struct(node CapnProto.Meta.Node, is_builder Bool)
    node_scoped_name = @_node_scoped_name(node)

    @_out << "\n\n:struct \(
      if !is_builder "box "
    )\(
      node_scoped_name
    )\(
      if is_builder ".Builder"
    )"
    if node.parameters.size > 0 (
      @_out << "("
      node.parameters.each -> (param |
        @_out << "\n  \(param.name) CapnProto.Pointer.Struct.Type"
        if is_builder (
          @_out << "\n  \(param.name)_Builder CapnProto.Pointer.Struct.Builder.Type"
        )
      )
      @_out << "\n)"
    )
    @_out << "\n  :let _p CapnProto.Pointer.Struct\(
      if is_builder ".Builder"
    )"
    @_out << "\n  :new \(
      if !is_builder "box read_"
    )from_pointer(@_p)"

    if is_builder (
      @_out << "\n  :fun as_reader: \(
        node_scoped_name
      )\(
        if node.parameters.size > 0 "\(
          param_names Array(String) = []
          node.parameters.each -> (param |
            param_names.push("\(param.name)")
          )
          "(\(String.join(param_names, ", ")))"
        )"
      ).read_from_pointer(@_p.as_reader)"
    |
      @_out << "\n  :new val read_val_from_pointer"
      @_out << "(p CapnProto.Pointer.Struct'val): @_p = p"
    )

    // Emit protocol-level constant info.
    try (
      struct = node.struct!
      @_out << "\n"
      @_out << "\n  :const capn_proto_data_word_count U16: \(
        struct.data_word_count
      )"
      @_out << "\n  :const capn_proto_pointer_count U16: \(
        struct.pointer_count
      )"
      @_out << "\n  :fun capn_proto_address U64: @_p.capn_proto_address"
    )

    // Emit constant values.
    node.nested_nodes.each -> (nest_info |
      try (
        const = @_find_node!(nest_info.id).const!
        @_out << "\n\n  :const \(
          _TextCase.Snake[nest_info.name]
        ) \(
          @_type_name(const.type, is_builder)
        ): \(
          @_show_value(const.value)
        )"
      )
    )

    // Emit data tracing methods.
    @_emit_trace_data(node, is_builder)
    if is_builder @_emit_copy_data_from(node)

    // Emit field accessor methods.
    fields = try (node.struct!.fields | return)
    fields.each -> (field |
      @_out << "\n"
      try @_emit_field_check_union_method!(node, field)
      @_emit_field_getter(node, field, is_builder)
      @_emit_field_getter_if_set(node, field, is_builder)
      if is_builder (
        try @_emit_field_setter!(node, field)
        try @_emit_field_list_initter!(node, field)
        try @_emit_field_list_initter!(node, field, True)
        try @_emit_field_list_trimmer!(node, field)
        try @_emit_field_union_initter!(node, field)
      )
    )

    // Emit other type definitions that act as groups for this struct.
    fields.each -> (field |
      try @_emit_struct(@_find_node!(field.group!.type_id), is_builder)
    )

    // Emit other type definitions that are nested within this struct.
    node.nested_nodes.each -> (nest_info |
      try (
        nested = @_find_node!(nest_info.id)
        next if nested.is_const
        @_emit_type(nested, is_builder)
      )
    )

  :fun ref _emit_trace_data(node CapnProto.Meta.Node, is_builder Bool)
    @_out << "\n\n  :is TraceData"
    @_out << "\n  :fun trace_data(trace TraceData.Observer)"

    if is_builder (
      // We can't trace a builder directly because some of its properties
      // may require `:fun ref` to access. So we must trace it via a reader.
      @_out << "\n    @as_reader.trace_data(trace)"
    |
      // If this is a group type (rather than a proper struct), we'll use
      // zero as the recurse id so that recursion prevention won't prevent
      // tracing of the inner group after seeing it has the same address
      // as the struct that contains the group.
      is_group = try (node.struct!.is_group | False)
      recurse_id_expr = if is_group ("0" | "@_p.absolute_address")

      // Trace the object and its properties
      @_out << "\n    trace.object(\(recurse_id_expr)) -> ("
      try node.struct!.fields.each -> (field |
        is_union = field.discriminant_value != field.no_discriminant
        suffix = if is_union ("" | "_if_set")
        name String = "\(_TextCase.Snake[field.name])"
        @_out << "\n      try trace.property(\(name.format.literal), @\(name)\(suffix)!)"
      )
      @_out << "\n    )"
    )

  :fun ref _emit_copy_data_from(node CapnProto.Meta.Node)
    // TODO: It should be possible to copy data (without knowing the schema
    // of every type we're copying) at the underlying pointer level.
    // This would be a more efficient and ultimately simpler way to copy data,
    // but it would require additional time investment that isn't important now.

    @_out << "\n\n  :fun ref copy_data_from(other \(
      @_node_scoped_name(node)
    )\(
      if node.parameters.size > 0 "\(
        param_names Array(String) = []
        node.parameters.each -> (param |
          param_names.push("\(param.name)")
        )
        "(\(String.join(param_names, ", ")))"
      )"
    )) None"

    try node.struct!.fields.each -> (field |
      name String = "\(_TextCase.Snake[field.name])"
      is_union = field.discriminant_value != field.no_discriminant
      get_suffix = if is_union ("" | "_if_set")
      init_prefix = if is_union ("init_" | "")

      slot = try (field.slot! |
        // If the field is not a slot, it must be a group.
        @_out << "\n    try (other_\(name) = other.\(name)\(get_suffix)!, @\(init_prefix)\(name).copy_data_from(other_\(name)))"
        next
      )

      case (
      | slot.type.is_void |
        if is_union (
          @_out << "\n    if other.is_\(name) @init_\(name)"
        )
      | slot.type.is_struct |
        @_out << "\n    try (other_\(name) = other.\(name)\(get_suffix)!, @\(init_prefix)\(name).copy_data_from(other_\(name)))"
      | slot.type.is_text |
        @_out << "\n    try "
        @_emit_field_set_expr(field, "\"\\(other.\(name)\(get_suffix)!)\"") // TODO: avoid intermediate string copy
      | slot.type.is_data |
        @_out << "\n    try "
        @_emit_field_set_expr(field, "\"\\(other.\(name)\(get_suffix)!)\".as_bytes") // TODO: avoid intermediate string copy
      | slot.type.is_list |
        @_out << "\n    try @init_\(name)_and_copy_data_from(other.\(name)\(get_suffix)!)"
      | @_is_pointer_type(slot.type) | // TODO: handle other pointer types
      |
        @_out << "\n    try "
        @_emit_field_set_expr(field, "other.\(name)\(get_suffix)!")
      )
    )

  :fun ref _emit_field_getter(
    node CapnProto.Meta.Node
    field CapnProto.Meta.Field
    is_builder Bool
  )
    is_union = field.discriminant_value != field.no_discriminant
    needs_ref = is_builder && (try (@_is_pointer_type(field.slot!.type) | True))
    @_out << "\n  :fun\(
      if needs_ref " ref"
    ) \(_TextCase.Snake[field.name])\(
      if is_union "!"
    ): "
    if is_union (
      try @_emit_field_check_union!(node, field, True)
      @_out << ", "
    )
    @_emit_field_get_expr(field, is_builder, False)

  :fun ref _emit_field_getter_if_set(
    node CapnProto.Meta.Node
    field CapnProto.Meta.Field
    is_builder Bool
  )
    is_union = field.discriminant_value != field.no_discriminant
    needs_ref = is_builder && (try (@_is_pointer_type(field.slot!.type) | True))
    @_out << "\n  :fun\(
      if needs_ref " ref"
    ) \(_TextCase.Snake[field.name])_if_set!: "
    if is_union (
      try @_emit_field_check_union!(node, field, True)
      @_out << ", "
    )
    @_emit_field_get_expr(field, is_builder, True)

  :fun ref _emit_field_setter!(
    node CapnProto.Meta.Node
    field CapnProto.Meta.Field
  )
    is_union = field.discriminant_value != field.no_discriminant
    error! if is_union

    slot = field.slot!
    // TODO: Implement other pointer-sharing setter options
    error! if (
      slot.type.is_void ||
      (
        @_is_pointer_type(slot.type) &&
        !slot.type.is_text && !slot.type.is_data && !slot.type.is_struct
      )
    )

    if slot.type.is_struct (
      @_out << "\n  :fun ref set_\(
        _TextCase.Snake[field.name]
      )_to_point_to_existing(existing \(
        @_type_name(slot.type, True)
      )): "
      @_emit_field_set_to_point_to_existing_expr(field, "existing._p")
    |
      @_out << "\n  :fun ref \"\(_TextCase.Snake[field.name])=\"(new_value): "
      @_emit_field_set_expr(field, "new_value")
    )

  :fun ref _emit_field_list_initter!(
    node CapnProto.Meta.Node
    field CapnProto.Meta.Field
    is_copy Bool = False
  )
    slot = field.slot!
    type = slot.type

    struct_type = type.list!.element_type.struct!
    struct = @_find_node!(struct_type.type_id).struct!

    suffix = ""
    params = "new_count"
    init_list_args = "new_count"

    if is_copy (
      suffix = "_and_copy_data_from"
      params = "existing \(@_type_name(type, False))"
      init_list_args = "existing.size"
    )

    @_out << "\n  :fun ref init_\(
      _TextCase.Snake[field.name]
    )\(suffix)(\(params))"

    is_union = field.discriminant_value != field.no_discriminant
    if is_union (
      try (
        discriminant_offset = node.struct!.discriminant_offset
        @_out << "\n    @_p.mark_union(\(
          (discriminant_offset * 2).format.hex.without_leading_zeros
        ), \(
          field.discriminant_value
        ))"
      )
    )

    @_out << "\n    "
    if is_copy @_out << "list = "
    @_out << "\(
      @_type_name(type, True)
    ).from_pointer(@_p.init_list(\(
      slot.offset
    ), \(
      struct.data_word_count
    ), \(
      struct.pointer_count
    ), \(init_list_args)))"

    if is_copy (
      @_out << "\n    existing.each_with_index -> (existing_item, index |"
      @_out << "\n      new_item = try (list[index]! | next)"
      @_out << "\n      new_item.copy_data_from(existing_item)"
      @_out << "\n    )"
      @_out << "\n    list"
    )

  :fun ref _emit_field_list_trimmer!(
    node CapnProto.Meta.Node
    field CapnProto.Meta.Field
  )
    is_union = field.discriminant_value != field.no_discriminant
    error! if is_union // TODO: implement for union-lists

    slot = field.slot!
    type = slot.type

    struct_type = type.list!.element_type.struct!
    struct = @_find_node!(struct_type.type_id).struct!

    @_out << "\n  :fun ref trim_\(
      _TextCase.Snake[field.name]
    )(new_start, new_finish)"

    @_out << "\n    \(
      @_type_name(type, True)
    ).from_pointer(@_p.trim_list(\(
      slot.offset
    ), \(
      struct.data_word_count
    ), \(
      struct.pointer_count
    ), new_start, new_finish))"

  :fun ref _emit_field_union_initter!(
    node CapnProto.Meta.Node
    field CapnProto.Meta.Field
  )
    is_union = field.discriminant_value != field.no_discriminant
    error! unless is_union

    struct = node.struct!
    error! unless struct.discriminant_count > 1

    // List init methods are handled in another place
    try (return if field.slot!.type.is_list)

    @_out << "\n  :fun ref init_\(_TextCase.Snake[field.name])"

    try (
      group_struct = @_find_node!(field.group!.type_id).struct!
      group_struct.fields.each -> (group_field |
        @_emit_field_clear_line(group_field)
      )
    |
      try (
        slot = field.slot!
        case (
        | slot.type.is_struct |
          @_emit_field_clear_line(field)
        | slot.type.is_void |
          None // do nothing extra - void can't be cleared nor set
        | slot.type.is_any_pointer |
          @_out << "(new_value None)" // TODO: implement "any pointer"
        |
          @_out << "(new_value)"
          @_out << "\n    "
          @_emit_field_set_expr(field, "new_value")
        )
      )
    )

    @_out << "\n    @_p.mark_union(\(
      (struct.discriminant_offset * 2).format.hex.without_leading_zeros
    ), \(
      field.discriminant_value
    ))"

    @_out << "\n    "
    @_emit_field_get_expr(field, True, False)

  :fun ref _emit_field_check_union_method!(
    node CapnProto.Meta.Node
    field CapnProto.Meta.Field
  )
    error! if field.discriminant_value == field.no_discriminant
    @_out << "\n  :fun is_\(_TextCase.Snake[field.name]): "
    try @_emit_field_check_union!(node, field, False)

  :fun ref _emit_field_check_union!(
    node CapnProto.Meta.Node
    field CapnProto.Meta.Field
    is_assert Bool
  )
    // Error if this field is not a struct, or not a discriminated one.
    struct = node.struct!
    error! unless struct.discriminant_count > 1
    error! if field.discriminant_value == field.no_discriminant

    @_out << "@_p.\(
      if is_assert ("assert_union!" | "check_union")
    )(\(
      (struct.discriminant_offset * 2).format.hex.without_leading_zeros
    ), \(
      field.discriminant_value
    ))"

  :fun ref _emit_field_get_expr(
    field CapnProto.Meta.Field
    is_builder Bool
    is_get_if_set Bool
  )
    suffix = if is_get_if_set ("_if_set!" | "")

    // First, handle the case where the field is a group instead of a slot.
    try (
      type_id = field.group!.type_id
      @_out << "\(
        @_find_node_scoped_name(type_id)
      )\(
        if is_builder (".Builder.from_pointer" | ".read_from_pointer")
      )(@_p)"
      return
    )

    // Otherwise, it must be a slot (unless a more recent version of the
    // CapnProto.Meta.Field type has some other option in its union, in
    // which case we can do nothing useful here and must return early).
    slot = try (field.slot! | return)

    // TODO: Add support for default values.
    type = slot.type
    offset = slot.offset
    case (
    | type.is_void |
      @_out << "None"
    | type.is_bool |
      @_out << "@_p.bool\(suffix)(\(
        (offset / 8).format.hex.without_leading_zeros
      ), \(
        U8[1].bit_shl((offset % 8).u8).format.binary
      ))"
      try (
        if slot.default_value.bool! (
          @_out << ".not"
        )
      )
    | type.is_int8 |
      @_out << "@_p.i8\(suffix)(\((offset * 1).format.hex.without_leading_zeros))"
      try (
        if slot.default_value.int8! != 0 (
          @_out << ".bit_xor(\(slot.default_value.int8!))"
        )
      )
    | type.is_int16 |
      @_out << "@_p.i16\(suffix)(\((offset * 2).format.hex.without_leading_zeros))"
      try (
        if slot.default_value.int16! != 0 (
          @_out << ".bit_xor(\(slot.default_value.int16!))"
        )
      )
    | type.is_int32 |
      @_out << "@_p.i32\(suffix)(\((offset * 4).format.hex.without_leading_zeros))"
      try (
        if slot.default_value.int32! != 0 (
          @_out << ".bit_xor(\(slot.default_value.int32!))"
        )
      )
    | type.is_int64 |
      @_out << "@_p.i64\(suffix)(\((offset * 8).format.hex.without_leading_zeros))"
      try (
        if slot.default_value.int64! != 0 (
          @_out << ".bit_xor(\(slot.default_value.int64!))"
        )
      )
    | type.is_uint8 |
      @_out << "@_p.u8\(suffix)(\((offset * 1).format.hex.without_leading_zeros))"
      try (
        if slot.default_value.uint8! != 0 (
          @_out << ".bit_xor(\(slot.default_value.uint8!))"
        )
      )
    | type.is_uint16 |
      @_out << "@_p.u16\(suffix)(\((offset * 2).format.hex.without_leading_zeros))"
      try (
        if slot.default_value.uint16! != 0 (
          @_out << ".bit_xor(\(slot.default_value.uint16!))"
        )
      )
    | type.is_uint32 |
      @_out << "@_p.u32\(suffix)(\((offset * 4).format.hex.without_leading_zeros))"
      try (
        if slot.default_value.uint32! != 0 (
          @_out << ".bit_xor(\(slot.default_value.uint32!))"
        )
      )
    | type.is_uint64 |
      @_out << "@_p.u64\(suffix)(\((offset * 8).format.hex.without_leading_zeros))"
      try (
        if slot.default_value.uint64! != 0 (
          @_out << ".bit_xor(\(slot.default_value.uint64!))"
        )
      )
    | type.is_float32 |
      @_out << "@_p.f32\(suffix)(\((offset * 4).format.hex.without_leading_zeros))"
      try (
        if slot.default_value.float32! != 0 (
          @_out << " // UNHANDLED: default_value"
        )
      )
    | type.is_float64 |
      @_out << "@_p.f64\(suffix)(\((offset * 8).format.hex.without_leading_zeros))"
      try (
        if slot.default_value.float64! != 0 (
          @_out << " // UNHANDLED: default_value"
        )
      )
    | type.is_text |
      @_out << "@_p.text\(suffix)(\(offset))"
      try (
        if slot.default_value.text!.size > 0 (
          @_out << " // UNHANDLED: default_value"
        )
      )
    | type.is_data |
      @_out << "@_p.data\(suffix)(\(offset))"
    //   TODO: Handle default value:
    //   try (
    //     if (slot.default_value.data!.size > 0) (
    //       @_out << " // UNHANDLED: default_value"
    //     )
    //   )
    | type.is_list |
      // TODO: handle default list values
      @_out << "\(@_type_name(type, is_builder)).\(
        if is_builder ("" | "read_")
      )from_pointer(@_p.list\(suffix)(\(offset)))"
    | type.is_enum |
      @_out << "\(@_type_name(type, is_builder))._new("
      @_out << "@_p.u16\(suffix)(\((offset * 2).format.hex.without_leading_zeros))"
      try (
        if slot.default_value.uint16! != 0 (
          @_out << ".bit_xor(\(slot.default_value.uint16!))"
        )
      )
      @_out << ")"
    | type.is_struct |
      // TODO: handle default struct values
      try (
        struct = @_find_node!(type.struct!.type_id).struct!

        @_out << "\(@_type_name(type, is_builder)).\(
          if is_builder ("" | "read_")
        )from_pointer(@_p.struct\(suffix)(\(offset)\(
          if is_builder ", \(struct.data_word_count), \(struct.pointer_count)"
        )))"
      )
    | type.is_interface |
      @_out << "None // UNHANDLED: interface" // TODO: handle interfaces
    | type.is_any_pointer |
      try (
        // Sometimes, anyPointer is a type parameter reference,
        // and that's a case that we actually can handle.
        parameter_ref = type.any_pointer!.parameter!
        parameter_index = parameter_ref.parameter_index
        parameters = @_find_node!(parameter_ref.scope_id).parameters
        parameter = parameters[parameter_index.usize]!

        @_out << "\(parameter.name)\(
          if is_builder ("_Builder." | ".read_")
        )from_pointer(@_p.struct\(suffix)(\(offset)\(
          if is_builder ", \(
            parameter.name)_Builder.capn_proto_data_word_count, \(
            parameter.name)_Builder.capn_proto_pointer_count"
        )))"
      |
        @_out << "None // UNHANDLED: non-parameter anyPointer" // TODO: handle this
      )
    |
      @_out << "NOT_IMPLEMENTED"
    )

  :fun ref _emit_field_set_to_point_to_existing_expr(
    field CapnProto.Meta.Field
    input_name String
  )
    slot = try (field.slot! | return)

    type = slot.type
    offset = slot.offset
    case (
    | type.is_struct |
      @_out << "\(@_type_name(type, True)).from_pointer(\(
      )@_p.set_struct_to_point_to_existing(\(offset), \(input_name)))"
    |
      @_out << "NOT_IMPLEMENTED"
    )

  :fun ref _emit_field_set_expr(field CapnProto.Meta.Field, input_name String)
    slot = try (field.slot! | return)

    // TODO: Add support for pointer values.
    type = slot.type
    offset = slot.offset
    case (
    | type.is_bool |
      @_out << "@_p.set_bool(\(
        (offset / 8).format.hex.without_leading_zeros
      ), \(
        U8[1].bit_shl((offset % 8).u8).format.binary
      ), Bool[\(input_name)]"
      try (
        if slot.default_value.bool! (
          @_out << ".not"
        )
      )
      @_out << ")"
    | type.is_int8 |
      @_out << "@_p.set_i8(\(
        (offset * 1).format.hex.without_leading_zeros), \(input_name), \(
        try (slot.default_value.int8! | 0)))"
    | type.is_int16 |
      @_out << "@_p.set_i16(\(
        (offset * 2).format.hex.without_leading_zeros), \(input_name), \(
        try (slot.default_value.int16! | 0)))"
    | type.is_int32 |
      @_out << "@_p.set_i32(\(
        (offset * 4).format.hex.without_leading_zeros), \(input_name), \(
        try (slot.default_value.int32! | 0)))"
    | type.is_int64 |
      @_out << "@_p.set_i64(\(
        (offset * 8).format.hex.without_leading_zeros), \(input_name), \(
        try (slot.default_value.int64! | 0)))"
    | type.is_uint8 |
      @_out << "@_p.set_u8(\(
        (offset * 1).format.hex.without_leading_zeros), \(input_name), \(
        try (slot.default_value.uint8! | 0)))"
    | type.is_uint16 |
      @_out << "@_p.set_u16(\(
        (offset * 2).format.hex.without_leading_zeros), \(input_name), \(
        try (slot.default_value.uint16! | 0)))"
    | type.is_uint32 |
      @_out << "@_p.set_u32(\(
        (offset * 4).format.hex.without_leading_zeros), \(input_name), \(
        try (slot.default_value.uint32! | 0)))"
    | type.is_uint64 |
      @_out << "@_p.set_u64(\(
        (offset * 8).format.hex.without_leading_zeros), \(input_name), \(
        try (slot.default_value.uint64! | 0)))"
    | type.is_float32 |
      @_out << "@_p.set_f32(\(
        (offset * 4).format.hex.without_leading_zeros), \(input_name), \(
        try (slot.default_value.float32! | 0)))"
    | type.is_float64 |
      @_out << "@_p.set_f64(\(
        (offset * 8).format.hex.without_leading_zeros), \(input_name), \(
        try (slot.default_value.float64! | 0)))"
    | type.is_text |
      @_out << "@_p.set_text(\(offset), \(input_name), \"\(
        try ("\(slot.default_value.text!)" | ""))\")"
    | type.is_data |
      @_out << "@_p.set_data(\(offset), \(input_name), b\"\(
        try ("\(slot.default_value.data!)" | ""))\")"
    | type.is_enum |
      @_out << "@_p.set_u16(\(
        (offset * 2).format.hex.without_leading_zeros), \(
        @_type_name(type, False))[\(input_name)].u16, \(
        try (slot.default_value.uint16! | 0)))"
    |
      @_out << "NOT_IMPLEMENTED"
    )

  :fun ref _emit_field_clear_line(field CapnProto.Meta.Field)
    slot = try (field.slot! | return)
    type = slot.type
    offset = slot.offset

    return if type.is_void

    @_out << "\n    "

    case (
    | type.is_bool |
      @_out << "@_p.set_bool(\(
        (offset / 8).format.hex.without_leading_zeros
      ), \(
        U8[1].bit_shl((offset % 8).u8).format.binary
      ), False)"
    | type.is_uint8 || type.is_int8 |
      @_out << "@_p.clear_8(\((offset * 1).format.hex.without_leading_zeros))"
    | type.is_uint16 || type.is_int16 || type.is_enum |
      @_out << "@_p.clear_16(\((offset * 2).format.hex.without_leading_zeros))"
    | type.is_uint32 || type.is_int32 || type.is_float32 |
      @_out << "@_p.clear_32(\((offset * 4).format.hex.without_leading_zeros))"
    | type.is_uint64 || type.is_int64 || type.is_float64 |
      @_out << "@_p.clear_64(\((offset * 8).format.hex.without_leading_zeros))"
    | @_is_pointer_type(type) |
      @_out << "@_p.clear_pointer(\(offset))"
    |
      @_out << "// NOT_IMPLEMENTED: \(_TextCase.Snake[field.name])"
      return
    )

    @_out << " // \(_TextCase.Snake[field.name])"
