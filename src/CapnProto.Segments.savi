:struct CapnProto.Segments
  :let _list Array(CapnProto.Segment)'ref
  :new: @_list = []

  :fun val val_buffers Array(Bytes)'val
    out Array(Bytes)'iso = []
    @_list.each -> (segment | out << segment._bytes)
    --out

  :fun ref take_val_buffers Array(Bytes)'val
    out Array(Bytes)'iso = []
    @_list.each -> (segment | out << segment._take_buffer)
    @_list.clear
    --out

  :fun ref _take_iso_ref_buffers Array(Bytes'ref)'iso
    out Array(Bytes'ref)'iso = []
    @_list.each -> (segment | out << segment._take_buffer)
    @_list.clear
    --out

  :fun ref take_val_segments @'val
    @_val_from_buffers(@_take_iso_ref_buffers)

  :new val _val_from_buffers(buffers_iso Array(Bytes'ref)'iso)
    buffers ref = --buffers_iso
    @_list = []
    buffers.each -> (buffer | CapnProto.Segment.new_from_bytes(@, buffer))

:module CapnProto.Segments.Writer
  :: Create a new array of buffers which has a new header buffer prepended.
  ::
  :: Raises an error if there are too many segments, or if any individual
  :: segment is too large to represent its size in the new header data.
  :fun non add_header_to_val_buffers!(buffers Array(Bytes)'val) Array(Bytes)'val
    header_size = CapnProto.Segments.Reader._header_size_for_segment_count!(
      buffers.size
    )
    header = Bytes.new_iso(header_size)
    header_index USize = 0
    header.push_native_u32(buffers.size.u32!.saturating_subtract(1).native_to_le)
    buffers.each -> (buffer |
      header.push_native_u32((buffer.size.u32! / 8).native_to_le)
    )
    while header.size < header_size header.push_native_u32(0) // padding

    out = Array(Bytes).new_iso(buffers.size + 1)
    out << --header
    buffers.each -> (buffer | out << buffer)
    --out

:class CapnProto.Segments.Reader
  :var _header: b""
  :var _segments: CapnProto.Segments.new // TODO: iso

  :fun ref take_segments: @_segments <<= CapnProto.Segments.new

  :: The maximum total size that the segment buffers are allowed to allocate.
  ::
  :: This security limit should be configured to a size that is large enough
  :: for any legitimate application messages, but small enough so as to not
  :: allow attackers to cause out-of-memory errors by announcing large sizes.
  :const max_total_size USize: 0x4000000 // 64 MiB

  :: Based on the captured header, determine the expected segment count.
  :: Returns zero if no header has been captured yet.
  :fun _expected_segment_count USize
    try (@_header.read_native_u32!(0).usize + 1 | 0)

  :: Based on the captured header, determine the expected size for a segment.
  :: Returns zero if no header has been captured yet.
  :fun _expected_segment_size(segment_id USize) USize
    try (
      @_header.read_native_u32!((segment_id + 1) * 4)
        .usize
        .saturating_multiply(8)
    |
      0
    )

  :: Based on the captured header, determine the expected size for all segments.
  :: Returns zero if no header has been captured yet.
  :fun _expected_total_size USize
    total USize = 0
    @_expected_segment_count.times -> (segment_id |
      total += @_expected_segment_size(segment_id)
    )
    total

  :: Read segments from the given byte stream.
  ::
  :: Returns True if all of the segments have been fully populated into memory.
  :: Returns False if still waiting for more bytes to arrive in the stream.
  ::
  :: Raises an error if continuing to read the segments into memory would
  :: exceed the security limit imposed by the `max_total_size` constant.
  :fun ref read!(stream ByteStream.Reader) Bool
    // First, if we haven't read the header yet, read it now.
    if @_header.is_empty (
      if !@_read_header!(stream) (return False)
    )

    // Then read any available segments from the stream.
    @_read_all_segments(stream)

  :: Return the number of bytes needed to represent the segments header,
  :: given the total number of segments to be addressed by the header.
  ::
  :: Raises an error if the header size would overflow the USize type.
  :fun non _header_size_for_segment_count!(segment_count USize) USize
    header_has_padding = segment_count.is_even
    (segment_count +! 1) *! 4 +! (if header_has_padding (4 | 0))

  :: Read the "segment table" header portion preceding and framing the segments.
  ::
  :: Returns False if there aren't enough bytes to read the complete header yet.
  :: Raises an error if the header causes a max size violation.
  :fun ref _read_header!(stream ByteStream.Reader) Bool
    // Determine the number of segments that will be in the segment table.
    // Return False if there aren't enough bytes yet to read the first U32.
    segment_count = try (
      stream.peek_native_u32!.le_to_native +! 1
    |
      return False
    )

    // Determine the number of bytes to expect in the segment table header.
    // Raise an error if even the header alone will exceed our max size.
    header_size = @_header_size_for_segment_count!(segment_count.usize)
    error! if header_size > @max_total_size

    // Extract the header bytes into our field for storage later.
    // Return False if the complete header bytes aren't available yet.
    @_header = try (
      stream.advance!(header_size).extract_token
    |
      return False
    )

    // Now that we have the header, we can calculate the expected total size.
    // We'll reserve enough space in the stream buffer for that many bytes.
    // But first, raise an error if the size would violate our security limit.
    expected_total_size = @_expected_total_size
    if expected_total_size + header_size > @max_total_size (
      // Error out, but first clear the header so that we'll be ready to
      // accept a different message header the next time we try to read.
      @_header = b""
      error!
    )
    stream.reserve_bytes_ahead(expected_total_size)

    True

  :fun ref _read_all_segments(stream ByteStream.Reader) Bool
    // Keep reading segments one by one until we've collected them all.
    // The header informs us about the size of each segment.
    count = @_expected_segment_count
    while @_segments._list.size < count (
      segment_id = @_segments._list.size
      segment_size = @_expected_segment_size(segment_id)
      try (
        CapnProto.Segment.new_from_bytes(
          @_segments
          stream.advance!(segment_size).extract_token
        )
      |
        return False
      )
    )

    // Nice, we successfully read all the segments. Clear the header,
    // so that we'll be ready to read in a different set of segments next time.
    @_header = b""

    True
